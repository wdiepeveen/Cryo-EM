2022-11-22 10:41:44,116 DEBUG (private) matplotlib data path: /Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/matplotlib/mpl-data
2022-11-22 10:41:44,117 DEBUG matplotlib data path: /Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/matplotlib/mpl-data
2022-11-22 10:41:44,122 DEBUG CONFIGDIR=/Users/wdiepeveen/.matplotlib
2022-11-22 10:41:44,125 DEBUG matplotlib version 3.3.4
2022-11-22 10:41:44,125 DEBUG interactive is False
2022-11-22 10:41:44,125 DEBUG platform is darwin
2022-11-22 10:41:44,125 DEBUG loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'sphinxcontrib', 'sysconfig', '_sysconfigdata_m_darwin_darwin', '_osx_support', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', '__future__', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.patch_stdout', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso._compatibility', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.compiled.mixed', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.api.project', 'jedi.inference.references', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', '_scproxy', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_21', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ctypes.macholib', 'ctypes.macholib.dyld', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'ipykernel.eventloops', 'distutils', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'IPython.core.completerlib', 'plistlib', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'appnope', 'appnope._nope', 'storemagic', '_pydevd_bundle', '_pydevd_bundle.pydevd_xml', '_pydev_bundle', '_pydev_bundle.pydev_log', '_pydevd_bundle.pydevd_constants', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', '_pydev_imps._pydev_saved_modules', 'xmlrpc', 'xmlrpc.client', 'gzip', 'xmlrpc.server', 'http.server', 'socketserver', '_pydev_bundle.pydev_imports', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydevd_bundle.pydevd_extension_utils', 'pydevd_plugins', 'pkg_resources', 'zipfile', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_utils', 'pydevd_file_utils', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', '_pydevd_bundle.pydevd_extension_api', 'pydev_jupyter_vars', '_pydevd_bundle.pydevd_vars', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_save_locals', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.info', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core._internal', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.shape_base', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.info', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.info', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.utils', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.mixins', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.scimath', 'numpy.lib.polynomial', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft.info', 'numpy.fft.fftpack', 'numpy.fft.fftpack_lite', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random.mtrand', 'mtrand', 'numpy.ctypeslib', 'numpy.core._dtype_ctypes', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'projects', 'projects.lifting_v2', 'projects.lifting_v2.experiments', 'projects.lifting_v2.experiments.experimentB3', 'projects.lifting_v2.experiments.experimentB3.E1_run', 'mrcfile', 'mrcfile.load_functions', 'mrcfile.bzip2mrcfile', 'mrcfile.mrcfile', 'mrcfile.mrcinterpreter', 'mrcfile.utils', 'mrcfile.constants', 'mrcfile.dtypes', 'mrcfile.mrcobject', 'mrcfile.future_mrcfile', 'mrcfile.gzipmrcfile', 'mrcfile.mrcmemmap', 'mrcfile.validator', 'mrcfile.version', 'scipy', 'scipy._lib', 'scipy._lib._testutils', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib._version', 'scipy._lib.six', 'scipy._lib._ccallback', 'scipy._lib._ccallback_c', 'scipy.fft', 'scipy.fft._basic', 'scipy._lib.uarray', 'scipy._lib._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray._uarray', 'scipy.fft._realtransforms', 'scipy.fft._helper', 'scipy.fft._pocketfft', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._backend', 'numpy.dual', 'scipy.ndimage', 'scipy.ndimage.filters', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy.ndimage._ni_docstrings', 'scipy._lib.doccer', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', 'scipy.ndimage.measurements', 'scipy.ndimage._ni_label', '_cython_0_29_13', '_ni_label', 'scipy.ndimage.morphology', 'aspire', 'logging.config', 'importlib_resources', 'importlib_resources._common', 'importlib_resources.abc', 'importlib_resources._compat', 'zipp', 'importlib_resources._py3', 'aspire.config', 'configparser', 'aspire.exceptions', 'aspire.operators', 'aspire.operators.blk_diag_matrix', 'scipy.linalg', 'scipy.linalg.linalg_version', 'scipy.linalg.misc', 'scipy.linalg.blas', 'scipy.linalg._fblas', 'scipy.linalg.lapack', 'scipy.linalg._flapack', 'scipy._lib._util', 'scipy.linalg.basic', 'scipy.linalg.flinalg', 'scipy.linalg._flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.matfuncs', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg._decomp_update', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._sketches', 'scipy.sparse', 'scipy.sparse.base', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.csr', 'scipy.sparse._sparsetools', 'scipy.sparse.compressed', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.csc', 'scipy.sparse.lil', 'scipy.sparse._csparsetools', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'aspire.utils', 'aspire.utils.misc', 'aspire.utils.matrix', 'aspire.utils.matlab_compat', 'aspire.utils.rotation', 'scipy.spatial', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy.spatial.qhull', 'scipy._lib.messagestream', 'scipy.spatial._spherical_voronoi', 'scipy.spatial._voronoi', 'scipy.spatial._plotutils', 'scipy._lib.decorator', 'scipy.spatial._procrustes', 'scipy.spatial.distance', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special', 'scipy.special.sf_error', 'scipy.special._ufuncs', 'scipy.special._ufuncs_cxx', 'scipy.special._basic', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm', 'scipy.special._ellip_harm_2', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.spatial.transform', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_groups', 'scipy.constants', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.spatial.transform._rotation_spline', 'aspire.utils.random', 'aspire.utils.types', 'aspire.utils.cell', 'aspire.operators.filters', 'scipy.interpolate', 'scipy.interpolate.interpolate', 'scipy.interpolate.fitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._bsplines', 'scipy.interpolate._bspl', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'aspire.utils.coor_trans', 'aspire.utils.filter_to_fb_mat', 'aspire.basis', 'aspire.basis.basis', 'scipy.sparse.linalg', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'aspire.basis.basis_utils', 'aspire.basis.dirac', 'aspire.basis.fb_2d', 'aspire.basis.fb_3d', 'aspire.basis.ffb_2d', 'aspire.image', 'aspire.image.image', 'aspire.volume', 'aspire.nufft', 'aspire.numeric', 'aspire.numeric.numpy', 'aspire.numeric.pyfftw_fft', 'pyfftw', 'pyfftw.pyfftw', 'pyfftw.config', 'pyfftw.builders', 'pyfftw.builders.builders', 'pyfftw.builders._utils', 'pyfftw.interfaces', 'pyfftw.interfaces.numpy_fft', 'pyfftw.interfaces._utils', 'pyfftw.interfaces.cache', 'scipy.fftpack', 'scipy.fftpack.basic', 'scipy.fftpack.helper', 'scipy.fftpack.pseudo_diffs', 'scipy.fftpack.convolve', 'scipy.fftpack.realtransforms', 'pyfftw.interfaces.scipy_fftpack', 'pyfftw.interfaces.scipy_fft', 'pyfftw._version', 'aspire.numeric.base_fft', 'aspire.image.preprocess', 'aspire.basis.ffb_3d', 'aspire.basis.fpswf_2d', 'scipy.optimize', 'scipy.optimize.optimize', 'scipy.optimize.linesearch', 'scipy.optimize.minpack2', 'scipy.optimize._minimize', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trlib', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trustregion_exact', 'scipy.optimize._trustregion_constr', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._differentiable_functions', 'scipy.optimize._numdiff', 'scipy.optimize._group_columns', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize.lbfgsb', 'scipy.optimize._lbfgsb', 'scipy.optimize.tnc', 'scipy.optimize.moduleTNC', 'scipy.optimize.cobyla', 'scipy.optimize._cobyla', 'scipy.optimize.slsqp', 'scipy.optimize._slsqp', 'scipy.optimize._root', 'scipy.optimize.minpack', 'scipy.optimize._minpack', 'scipy.optimize._lsq', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.bvls', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root_scalar', 'scipy.optimize.zeros', 'scipy.optimize._zeros', 'scipy.optimize.nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._linprog', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_util', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_simplex', 'scipy.optimize._linprog_rs', 'scipy.optimize._bglu_dense', 'scipy.optimize._lsap', 'scipy.optimize._lsap_module', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._dual_annealing', 'aspire.basis.pswf_2d', 'aspire.basis.pswf_utils', 'aspire.basis.fpswf_3d', 'aspire.basis.pswf_3d', 'aspire.basis.polar_2d', 'aspire.source', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.arrays', 'pandas.core.arrays.array_', 'pandas.core.dtypes', 'pandas.core.dtypes.common', 'pandas._libs.algos', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.inference', 'pandas._typing', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.missing', 'pandas.util._validators', 'pandas.core.ops', 'pandas._libs.ops', 'pandas.core.common', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.docstrings', 'pandas.core.sorting', 'pandas.core.algorithms', 'pandas.core.indexers', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.core.nanops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.tools', 'pandas.core.tools.datetimes', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas._libs.sparse', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.index', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.numeric', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas.core.internals.arrays', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'csv', '_csv', 'mmap', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._matplotlib', 'pandas.plotting._matplotlib.boxplot', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-11-22 10:41:44,182 DEBUG CACHEDIR=/Users/wdiepeveen/.matplotlib
2022-11-22 10:41:44,186 DEBUG Using fontManager instance from /Users/wdiepeveen/.matplotlib/fontlist-v330.json
2022-11-22 10:41:45,142 DEBUG Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-11-22 10:41:45,146 DEBUG Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-11-22 10:42:22,213 INFO Results folder is /Users/wdiepeveen/Documents/PhD/Projects/2 - Cryo-EM/src/src/Cryo-EM/tools/../results/Demo_SNR16_N2048_lambd30_r3_22-11-22_10-42-22
2022-11-22 10:43:56,737 INFO Results folder is /Users/wdiepeveen/Documents/PhD/Projects/2 - Cryo-EM/src/src/Cryo-EM/tools/../results/Demo_SNR16_N2048_lambd30_r3_22-11-22_10-43-56
2022-11-22 10:44:49,994 INFO Results folder is /Users/wdiepeveen/Documents/PhD/Projects/2 - Cryo-EM/src/src/Cryo-EM/tools/../results/Demo_SNR16_N2048_lambd30_r3_22-11-22_10-44-49
2022-11-22 10:44:50,604 INFO Load 3D map and downsample 3D map to desired grids of 91 x 91 x 91.
2022-11-22 10:44:50,606 INFO Initialize simulation object and CTF filters.
2022-11-22 10:45:04,517 INFO Load 3D map and downsample 3D map to desired grids of 91 x 91 x 91.
2022-11-22 10:45:04,519 INFO Initialize simulation object and CTF filters.
2022-11-22 10:45:04,521 INFO Use downsampled map to creat simulation object.
2022-11-22 10:45:04,566 INFO Get true rotation angles generated randomly by the simulation object.
2022-11-22 10:45:06,163 DEBUG Corresponding type is already real float64.
2022-11-22 10:45:06,164 DEBUG nufft passed real_type for signal, converting
2022-11-22 10:45:06,169 INFO Trying NFFT backend finufft
2022-11-22 10:45:06,600 INFO NFFT backend finufft usable.
2022-11-22 10:45:06,601 INFO Trying NFFT backend cufinufft
2022-11-22 10:45:06,604 INFO NFFT backend cufinufft not usable:
	No module named 'pycuda'
2022-11-22 10:45:06,605 INFO Trying NFFT backend pynfft
2022-11-22 10:45:06,607 INFO NFFT backend pynfft not usable:
	No module named 'pynfft'
2022-11-22 10:45:06,607 INFO Selected NFFT backend = finufft.
2022-11-22 10:45:21,717 INFO Applying forward transformations in pipeline
2022-11-22 10:45:21,718 INFO All forward transformations applied
2022-11-22 10:45:21,719 INFO Loaded 2048 images
2022-11-22 10:45:23,450 DEBUG Corresponding type is already real float64.
2022-11-22 10:45:23,450 DEBUG nufft passed real_type for signal, converting
2022-11-22 10:45:38,214 INFO Applying forward transformations in pipeline
2022-11-22 10:45:38,215 INFO All forward transformations applied
2022-11-22 10:45:38,215 INFO Loaded 2048 images
2022-11-22 10:45:38,216 INFO Initializing density
2022-11-22 10:49:57,579 INFO Load 3D map and downsample 3D map to desired grids of 91 x 91 x 91.
2022-11-22 10:49:57,581 INFO Initialize simulation object and CTF filters.
2022-11-22 10:49:57,582 INFO Use downsampled map to creat simulation object.
2022-11-22 10:49:57,631 INFO Get true rotation angles generated randomly by the simulation object.
2022-11-22 10:49:59,399 DEBUG Corresponding type is already real float64.
2022-11-22 10:49:59,399 DEBUG nufft passed real_type for signal, converting
2022-11-22 10:50:14,318 INFO Applying forward transformations in pipeline
2022-11-22 10:50:14,320 INFO All forward transformations applied
2022-11-22 10:50:14,320 INFO Loaded 2048 images
2022-11-22 10:50:15,950 DEBUG Corresponding type is already real float64.
2022-11-22 10:50:15,950 DEBUG nufft passed real_type for signal, converting
2022-11-22 10:50:30,624 INFO Applying forward transformations in pipeline
2022-11-22 10:50:30,626 INFO All forward transformations applied
2022-11-22 10:50:30,627 INFO Loaded 2048 images
2022-11-22 10:50:30,628 INFO Initializing density
2022-11-22 10:55:44,310 DEBUG label 0:
    self = arg(0, name=self)                 ['self']
    $0.2 = getattr(value=self, attr=reshape) ['$0.2', 'self']
    $const_-1 = const(int, -1)               ['$const_-1']
    $const_4 = const(int, 4)                 ['$const_4']
    $const0.3 = build_tuple(items=[Var($const_-1, properties.py:142), Var($const_4, properties.py:142)]) ['$const0.3', '$const_-1', '$const_4']
    s = call $0.2($const0.3, func=$0.2, args=[Var($const0.3, properties.py:142)], kws=(), vararg=None) ['$0.2', '$const0.3', 's']
    $0.5 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>) ['$0.5']
    $0.6 = getattr(value=$0.5, attr=empty)   ['$0.5', '$0.6']
    $0.8 = getattr(value=s, attr=shape)      ['$0.8', 's']
    $const0.9 = const(int, 0)                ['$const0.9']
    $0.10 = getitem(value=$0.8, index=$const0.9, fn=<built-in function getitem>) ['$0.10', '$0.8', '$const0.9']
    $0.12 = getattr(value=self, attr=dtype)  ['$0.12', 'self']
    n = call $0.6($0.10, func=$0.6, args=[Var($0.10, properties.py:143)], kws=[('dtype', Var($0.12, properties.py:143))], vararg=None) ['$0.10', '$0.12', '$0.6', 'n']
    jump 34                                  []
label 34:
    jump 36                                  []
label 36:
    $36.1 = global(range: <class 'range'>)   ['$36.1']
    $36.3 = getattr(value=s, attr=shape)     ['$36.3', 's']
    $const36.4 = const(int, 0)               ['$const36.4']
    $36.5 = getitem(value=$36.3, index=$const36.4, fn=<built-in function getitem>) ['$36.3', '$36.5', '$const36.4']
    $36.6 = call $36.1($36.5, func=$36.1, args=[Var($36.5, properties.py:144)], kws=(), vararg=None) ['$36.1', '$36.5', '$36.6']
    $36.7 = getiter(value=$36.6)             ['$36.6', '$36.7']
    $phi50.1 = $36.7                         ['$36.7', '$phi50.1']
    jump 50                                  []
label 50:
    $50.2 = iternext(value=$phi50.1)         ['$50.2', '$phi50.1']
    $50.3 = pair_first(value=$50.2)          ['$50.2', '$50.3']
    $50.4 = pair_second(value=$50.2)         ['$50.2', '$50.4']
    $phi52.1 = $50.3                         ['$50.3', '$phi52.1']
    $phi130.1 = $50.3                        ['$50.3', '$phi130.1']
    $phi130.2 = $phi50.1                     ['$phi130.2', '$phi50.1']
    branch $50.4, 52, 130                    ['$50.4']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $52.2 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>) ['$52.2']
    $52.3 = getattr(value=$52.2, attr=sqrt)  ['$52.2', '$52.3']
    $const52.6 = const(int, 0)               ['$const52.6']
    $52.7 = build_tuple(items=[Var(i, properties.py:144), Var($const52.6, properties.py:145)]) ['$52.7', '$const52.6', 'i']
    $52.8 = getitem(value=s, index=$52.7, fn=<built-in function getitem>) ['$52.7', '$52.8', 's']
    $const52.9 = const(int, 2)               ['$const52.9']
    $52.10 = $52.8 ** $const52.9             ['$52.10', '$52.8', '$const52.9']
    $const52.13 = const(int, 1)              ['$const52.13']
    $52.14 = build_tuple(items=[Var(i, properties.py:144), Var($const52.13, properties.py:145)]) ['$52.14', '$const52.13', 'i']
    $52.15 = getitem(value=s, index=$52.14, fn=<built-in function getitem>) ['$52.14', '$52.15', 's']
    $const52.16 = const(int, 2)              ['$const52.16']
    $52.17 = $52.15 ** $const52.16           ['$52.15', '$52.17', '$const52.16']
    $52.18 = $52.10 + $52.17                 ['$52.10', '$52.17', '$52.18']
    $const52.21 = const(int, 2)              ['$const52.21']
    $52.22 = build_tuple(items=[Var(i, properties.py:144), Var($const52.21, properties.py:145)]) ['$52.22', '$const52.21', 'i']
    $52.23 = getitem(value=s, index=$52.22, fn=<built-in function getitem>) ['$52.22', '$52.23', 's']
    $const52.24 = const(int, 2)              ['$const52.24']
    $52.25 = $52.23 ** $const52.24           ['$52.23', '$52.25', '$const52.24']
    $52.26 = $52.18 + $52.25                 ['$52.18', '$52.25', '$52.26']
    $const52.29 = const(int, 3)              ['$const52.29']
    $52.30 = build_tuple(items=[Var(i, properties.py:144), Var($const52.29, properties.py:145)]) ['$52.30', '$const52.29', 'i']
    $52.31 = getitem(value=s, index=$52.30, fn=<built-in function getitem>) ['$52.30', '$52.31', 's']
    $const52.32 = const(int, 2)              ['$const52.32']
    $52.33 = $52.31 ** $const52.32           ['$52.31', '$52.33', '$const52.32']
    $52.34 = $52.26 + $52.33                 ['$52.26', '$52.33', '$52.34']
    $52.35 = call $52.3($52.34, func=$52.3, args=[Var($52.34, properties.py:145)], kws=(), vararg=None) ['$52.3', '$52.34', '$52.35']
    n[i] = $52.35                            ['$52.35', 'i', 'n']
    jump 50                                  []
label 130:
    jump 132                                 []
label 132:
    $132.2 = getattr(value=n, attr=reshape)  ['$132.2', 'n']
    $132.4 = getattr(value=self, attr=shape) ['$132.4', 'self']
    $const132.5 = const(NoneType, None)      ['$const132.5']
    $const132.6 = const(int, -1)             ['$const132.6']
    $132.7 = global(slice: <class 'slice'>)  ['$132.7']
    $132.8 = call $132.7($const132.5, $const132.6, func=$132.7, args=(Var($const132.5, properties.py:146), Var($const132.6, properties.py:146)), kws=(), vararg=None) ['$132.7', '$132.8', '$const132.5', '$const132.6']
    $132.9 = getitem(value=$132.4, index=$132.8, fn=<built-in function getitem>) ['$132.4', '$132.8', '$132.9']
    $132.10 = call $132.2($132.9, func=$132.2, args=[Var($132.9, properties.py:146)], kws=(), vararg=None) ['$132.10', '$132.2', '$132.9']
    $132.11 = cast(value=$132.10)            ['$132.10', '$132.11']
    return $132.11                           ['$132.11']

2022-11-22 10:55:44,328 DEBUG ==== SSA block analysis pass on 0
2022-11-22 10:55:44,337 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,338 DEBUG on stmt: self = arg(0, name=self)
2022-11-22 10:55:44,339 DEBUG on stmt: $0.2 = getattr(value=self, attr=reshape)
2022-11-22 10:55:44,339 DEBUG on stmt: $const_-1 = const(int, -1)
2022-11-22 10:55:44,339 DEBUG on stmt: $const_4 = const(int, 4)
2022-11-22 10:55:44,339 DEBUG on stmt: $const0.3 = build_tuple(items=[Var($const_-1, properties.py:142), Var($const_4, properties.py:142)])
2022-11-22 10:55:44,339 DEBUG on stmt: s = call $0.2($const0.3, func=$0.2, args=[Var($const0.3, properties.py:142)], kws=(), vararg=None)
2022-11-22 10:55:44,339 DEBUG on stmt: $0.5 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>)
2022-11-22 10:55:44,340 DEBUG on stmt: $0.6 = getattr(value=$0.5, attr=empty)
2022-11-22 10:55:44,340 DEBUG on stmt: $0.8 = getattr(value=s, attr=shape)
2022-11-22 10:55:44,340 DEBUG on stmt: $const0.9 = const(int, 0)
2022-11-22 10:55:44,340 DEBUG on stmt: $0.10 = static_getitem(value=$0.8, index=0, index_var=$const0.9, fn=<built-in function getitem>)
2022-11-22 10:55:44,340 DEBUG on stmt: $0.12 = getattr(value=self, attr=dtype)
2022-11-22 10:55:44,340 DEBUG on stmt: n = call $0.6($0.10, func=$0.6, args=[Var($0.10, properties.py:143)], kws=[('dtype', Var($0.12, properties.py:143))], vararg=None)
2022-11-22 10:55:44,340 DEBUG on stmt: jump 34
2022-11-22 10:55:44,340 DEBUG ==== SSA block analysis pass on 34
2022-11-22 10:55:44,340 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,340 DEBUG on stmt: jump 36
2022-11-22 10:55:44,340 DEBUG ==== SSA block analysis pass on 36
2022-11-22 10:55:44,340 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,340 DEBUG on stmt: $36.1 = global(range: <class 'range'>)
2022-11-22 10:55:44,341 DEBUG on stmt: $36.3 = getattr(value=s, attr=shape)
2022-11-22 10:55:44,341 DEBUG on stmt: $const36.4 = const(int, 0)
2022-11-22 10:55:44,341 DEBUG on stmt: $36.5 = static_getitem(value=$36.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
2022-11-22 10:55:44,341 DEBUG on stmt: $36.6 = call $36.1($36.5, func=$36.1, args=[Var($36.5, properties.py:144)], kws=(), vararg=None)
2022-11-22 10:55:44,341 DEBUG on stmt: $36.7 = getiter(value=$36.6)
2022-11-22 10:55:44,341 DEBUG on stmt: $phi50.1 = $36.7
2022-11-22 10:55:44,341 DEBUG on stmt: jump 50
2022-11-22 10:55:44,341 DEBUG ==== SSA block analysis pass on 50
2022-11-22 10:55:44,341 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,341 DEBUG on stmt: $50.2 = iternext(value=$phi50.1)
2022-11-22 10:55:44,341 DEBUG on stmt: $50.3 = pair_first(value=$50.2)
2022-11-22 10:55:44,341 DEBUG on stmt: $50.4 = pair_second(value=$50.2)
2022-11-22 10:55:44,341 DEBUG on stmt: $phi52.1 = $50.3
2022-11-22 10:55:44,341 DEBUG on stmt: $phi130.1 = $50.3
2022-11-22 10:55:44,341 DEBUG on stmt: $phi130.2 = $phi50.1
2022-11-22 10:55:44,342 DEBUG on stmt: branch $50.4, 52, 130
2022-11-22 10:55:44,342 DEBUG ==== SSA block analysis pass on 52
2022-11-22 10:55:44,342 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,342 DEBUG on stmt: i = $phi52.1
2022-11-22 10:55:44,343 DEBUG on stmt: $52.2 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.3 = getattr(value=$52.2, attr=sqrt)
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.6 = const(int, 0)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.7 = build_tuple(items=[Var(i, properties.py:144), Var($const52.6, properties.py:145)])
2022-11-22 10:55:44,343 DEBUG on stmt: $52.8 = getitem(value=s, index=$52.7, fn=<built-in function getitem>)
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.9 = const(int, 2)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.10 = $52.8 ** $const52.9
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.13 = const(int, 1)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.14 = build_tuple(items=[Var(i, properties.py:144), Var($const52.13, properties.py:145)])
2022-11-22 10:55:44,343 DEBUG on stmt: $52.15 = getitem(value=s, index=$52.14, fn=<built-in function getitem>)
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.16 = const(int, 2)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.17 = $52.15 ** $const52.16
2022-11-22 10:55:44,343 DEBUG on stmt: $52.18 = $52.10 + $52.17
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.21 = const(int, 2)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.22 = build_tuple(items=[Var(i, properties.py:144), Var($const52.21, properties.py:145)])
2022-11-22 10:55:44,343 DEBUG on stmt: $52.23 = getitem(value=s, index=$52.22, fn=<built-in function getitem>)
2022-11-22 10:55:44,343 DEBUG on stmt: $const52.24 = const(int, 2)
2022-11-22 10:55:44,343 DEBUG on stmt: $52.25 = $52.23 ** $const52.24
2022-11-22 10:55:44,343 DEBUG on stmt: $52.26 = $52.18 + $52.25
2022-11-22 10:55:44,344 DEBUG on stmt: $const52.29 = const(int, 3)
2022-11-22 10:55:44,344 DEBUG on stmt: $52.30 = build_tuple(items=[Var(i, properties.py:144), Var($const52.29, properties.py:145)])
2022-11-22 10:55:44,344 DEBUG on stmt: $52.31 = getitem(value=s, index=$52.30, fn=<built-in function getitem>)
2022-11-22 10:55:44,344 DEBUG on stmt: $const52.32 = const(int, 2)
2022-11-22 10:55:44,344 DEBUG on stmt: $52.33 = $52.31 ** $const52.32
2022-11-22 10:55:44,344 DEBUG on stmt: $52.34 = $52.26 + $52.33
2022-11-22 10:55:44,344 DEBUG on stmt: $52.35 = call $52.3($52.34, func=$52.3, args=[Var($52.34, properties.py:145)], kws=(), vararg=None)
2022-11-22 10:55:44,344 DEBUG on stmt: n[i] = $52.35
2022-11-22 10:55:44,344 DEBUG on stmt: jump 50
2022-11-22 10:55:44,344 DEBUG ==== SSA block analysis pass on 130
2022-11-22 10:55:44,345 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,345 DEBUG on stmt: jump 132
2022-11-22 10:55:44,345 DEBUG ==== SSA block analysis pass on 132
2022-11-22 10:55:44,345 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7febe5f078d0>
2022-11-22 10:55:44,345 DEBUG on stmt: $132.2 = getattr(value=n, attr=reshape)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.4 = getattr(value=self, attr=shape)
2022-11-22 10:55:44,345 DEBUG on stmt: $const132.5 = const(NoneType, None)
2022-11-22 10:55:44,345 DEBUG on stmt: $const132.6 = const(int, -1)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.7 = global(slice: <class 'slice'>)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.8 = call $132.7($const132.5, $const132.6, func=$132.7, args=(Var($const132.5, properties.py:146), Var($const132.6, properties.py:146)), kws=(), vararg=None)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.9 = static_getitem(value=$132.4, index=slice(None, -1, None), index_var=$132.8, fn=<built-in function getitem>)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.10 = call $132.2($132.9, func=$132.2, args=[Var($132.9, properties.py:146)], kws=(), vararg=None)
2022-11-22 10:55:44,345 DEBUG on stmt: $132.11 = cast(value=$132.10)
2022-11-22 10:55:44,345 DEBUG on stmt: return $132.11
2022-11-22 10:55:44,346 DEBUG defs defaultdict(<class 'list'>,
            {'$0.10': [<numba.core.ir.Assign object at 0x7febe5f105f8>],
             '$0.12': [<numba.core.ir.Assign object at 0x7febe5f02780>],
             '$0.2': [<numba.core.ir.Assign object at 0x7febe5edacf8>],
             '$0.5': [<numba.core.ir.Assign object at 0x7febe5f021d0>],
             '$0.6': [<numba.core.ir.Assign object at 0x7febe5f022b0>],
             '$0.8': [<numba.core.ir.Assign object at 0x7febe5f02438>],
             '$132.10': [<numba.core.ir.Assign object at 0x7febe5f10be0>],
             '$132.11': [<numba.core.ir.Assign object at 0x7febe5f10cc0>],
             '$132.2': [<numba.core.ir.Assign object at 0x7febe5f10550>],
             '$132.4': [<numba.core.ir.Assign object at 0x7febe5f106d8>],
             '$132.7': [<numba.core.ir.Assign object at 0x7febe5f10978>],
             '$132.8': [<numba.core.ir.Assign object at 0x7febe5f10a20>],
             '$132.9': [<numba.core.ir.Assign object at 0x7febe5f10f28>],
             '$36.1': [<numba.core.ir.Assign object at 0x7febe5f02b70>],
             '$36.3': [<numba.core.ir.Assign object at 0x7febe5f02cf8>],
             '$36.5': [<numba.core.ir.Assign object at 0x7febe5f10d68>],
             '$36.6': [<numba.core.ir.Assign object at 0x7febe5f02f98>],
             '$36.7': [<numba.core.ir.Assign object at 0x7febe5f070b8>],
             '$50.2': [<numba.core.ir.Assign object at 0x7febe5f07278>],
             '$50.3': [<numba.core.ir.Assign object at 0x7febe5f07320>],
             '$50.4': [<numba.core.ir.Assign object at 0x7febe5f073c8>],
             '$52.10': [<numba.core.ir.Assign object at 0x7febe5f07dd8>],
             '$52.14': [<numba.core.ir.Assign object at 0x7febe5f0b128>],
             '$52.15': [<numba.core.ir.Assign object at 0x7febe5f0b208>],
             '$52.17': [<numba.core.ir.Assign object at 0x7febe5f0b3c8>],
             '$52.18': [<numba.core.ir.Assign object at 0x7febe5f0b4a8>],
             '$52.2': [<numba.core.ir.Assign object at 0x7febe5f07748>],
             '$52.22': [<numba.core.ir.Assign object at 0x7febe5f0b7b8>],
             '$52.23': [<numba.core.ir.Assign object at 0x7febe5f0b898>],
             '$52.25': [<numba.core.ir.Assign object at 0x7febe5f0ba58>],
             '$52.26': [<numba.core.ir.Assign object at 0x7febe5f0bb38>],
             '$52.3': [<numba.core.ir.Assign object at 0x7febe5f07828>],
             '$52.30': [<numba.core.ir.Assign object at 0x7febe5f0be48>],
             '$52.31': [<numba.core.ir.Assign object at 0x7febe5f0bf28>],
             '$52.33': [<numba.core.ir.Assign object at 0x7febe5f10128>],
             '$52.34': [<numba.core.ir.Assign object at 0x7febe5f10208>],
             '$52.35': [<numba.core.ir.Assign object at 0x7febe5f102e8>],
             '$52.7': [<numba.core.ir.Assign object at 0x7febe5f07b38>],
             '$52.8': [<numba.core.ir.Assign object at 0x7febe5f07c18>],
             '$const0.3': [<numba.core.ir.Assign object at 0x7febe5edaf28>],
             '$const0.9': [<numba.core.ir.Assign object at 0x7febe5f02518>],
             '$const132.5': [<numba.core.ir.Assign object at 0x7febe5f107b8>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7febe5f10898>],
             '$const36.4': [<numba.core.ir.Assign object at 0x7febe5f02dd8>],
             '$const52.13': [<numba.core.ir.Assign object at 0x7febe5f0b048>],
             '$const52.16': [<numba.core.ir.Assign object at 0x7febe5f0b2e8>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7febe5f0b6d8>],
             '$const52.24': [<numba.core.ir.Assign object at 0x7febe5f0b978>],
             '$const52.29': [<numba.core.ir.Assign object at 0x7febe5f0bd68>],
             '$const52.32': [<numba.core.ir.Assign object at 0x7febe5f10048>],
             '$const52.6': [<numba.core.ir.Assign object at 0x7febe5f07a58>],
             '$const52.9': [<numba.core.ir.Assign object at 0x7febe5f07cf8>],
             '$const_-1': [<numba.core.ir.Assign object at 0x7febe5edae10>],
             '$const_4': [<numba.core.ir.Assign object at 0x7febe5edaeb8>],
             '$phi130.1': [<numba.core.ir.Assign object at 0x7febe5f074a8>],
             '$phi130.2': [<numba.core.ir.Assign object at 0x7febe5f07518>],
             '$phi50.1': [<numba.core.ir.Assign object at 0x7febe5f020f0>],
             '$phi52.1': [<numba.core.ir.Assign object at 0x7febe5f07438>],
             'i': [<numba.core.ir.Assign object at 0x7febe5f07668>],
             'n': [<numba.core.ir.Assign object at 0x7febe5f029e8>],
             's': [<numba.core.ir.Assign object at 0x7febe5f02048>],
             'self': [<numba.core.ir.Assign object at 0x7febe5edab70>]})
2022-11-22 10:55:44,346 DEBUG SSA violators set()
2022-11-22 10:55:44,426 DEBUG label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    jump 12                                  []
label 12:
    $12.1 = global(enumerate: <class 'enumerate'>) ['$12.1']
    $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None) ['$12.1', '$12.3', 'shape']
    $12.4 = getiter(value=$12.3)             ['$12.3', '$12.4']
    $phi20.1 = $12.4                         ['$12.4', '$phi20.1']
    jump 20                                  []
label 20:
    $20.2 = iternext(value=$phi20.1)         ['$20.2', '$phi20.1']
    $20.3 = pair_first(value=$20.2)          ['$20.2', '$20.3']
    $20.4 = pair_second(value=$20.2)         ['$20.2', '$20.4']
    $phi22.1 = $20.3                         ['$20.3', '$phi22.1']
    $phi60.1 = $20.3                         ['$20.3', '$phi60.1']
    $phi60.2 = $phi20.1                      ['$phi20.1', '$phi60.2']
    branch $20.4, 22, 60                     ['$20.4']
label 22:
    $22.4 = exhaust_iter(value=$phi22.1, count=2) ['$22.4', '$phi22.1']
    $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22.2', '$22.4']
    $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22.3', '$22.4']
    ax = $22.2                               ['$22.2', 'ax']
    s = $22.3                                ['$22.3', 's']
    $const22.6 = const(int, 0)               ['$const22.6']
    $22.7 = s < $const22.6                   ['$22.7', '$const22.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None) ['$22.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const36.2 = const(int, 1)               ['$const36.2']
    $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$36.3', '$const36.2', 'num_neg_value']
    num_neg_value = $36.3                    ['$36.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$50.3', 'known_size', 's']
    known_size = $50.3                       ['$50.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const62.2 = const(int, 0)               ['$const62.2']
    $62.3 = num_neg_value == $const62.2      ['$62.3', '$const62.2', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None) ['$62.3', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $70.3 = origsize != known_size           ['$70.3', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None) ['$70.3', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78.1 = global(ValueError: <class 'ValueError'>) ['$78.1']
    $const78.2 = const(str, total size of new array must be unchanged) ['$const78.2']
    $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None) ['$78.1', '$78.3', '$const78.2']
    raise $78.3                              ['$78.3']
label 88:
    $const88.2 = const(int, 1)               ['$const88.2']
    $88.3 = num_neg_value == $const88.2      ['$88.3', '$const88.2', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None) ['$88.3', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const96.2 = const(int, 0)               ['$const96.2']
    $96.3 = known_size == $const96.2         ['$96.3', '$const96.2', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None) ['$102pred', '$96.3', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const104.3 = const(int, 0)              ['$const104.3']
    ok = origsize == $const104.3             ['$const104.3', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $118.6 = origsize % known_size           ['$118.6', 'known_size', 'origsize']
    $const118.7 = const(int, 0)              ['$const118.7']
    ok = $118.6 == $const118.7               ['$118.6', '$const118.7', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142.1 = global(ValueError: <class 'ValueError'>) ['$142.1']
    $const142.2 = const(str, total size of new array must be unchanged) ['$const142.2']
    $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None) ['$142.1', '$142.3', '$const142.2']
    raise $142.3                             ['$142.3']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160.1 = global(ValueError: <class 'ValueError'>) ['$160.1']
    $const160.2 = const(str, multiple negative shape values) ['$const160.2']
    $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None) ['$160.1', '$160.3', '$const160.2']
    raise $160.3                             ['$160.3']
label 168:
    $const168.1 = const(NoneType, None)      ['$const168.1']
    $168.2 = cast(value=$const168.1)         ['$168.2', '$const168.1']
    return $168.2                            ['$168.2']

2022-11-22 10:55:44,444 DEBUG ==== SSA block analysis pass on 0
2022-11-22 10:55:44,444 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,444 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,444 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,444 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,444 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,444 DEBUG on stmt: jump 10
2022-11-22 10:55:44,444 DEBUG ==== SSA block analysis pass on 10
2022-11-22 10:55:44,444 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,444 DEBUG on stmt: jump 12
2022-11-22 10:55:44,444 DEBUG ==== SSA block analysis pass on 12
2022-11-22 10:55:44,444 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,444 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,444 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,445 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,445 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,445 DEBUG on stmt: jump 20
2022-11-22 10:55:44,445 DEBUG ==== SSA block analysis pass on 20
2022-11-22 10:55:44,445 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,445 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,445 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,445 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,445 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,445 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,445 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,445 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,445 DEBUG ==== SSA block analysis pass on 22
2022-11-22 10:55:44,445 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,445 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,445 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,445 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,445 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,445 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,445 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,445 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,445 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,445 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,445 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,445 DEBUG ==== SSA block analysis pass on 36
2022-11-22 10:55:44,445 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,446 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,446 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,446 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,446 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,446 DEBUG on stmt: jump 169
2022-11-22 10:55:44,446 DEBUG ==== SSA block analysis pass on 50
2022-11-22 10:55:44,446 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,446 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,446 DEBUG on stmt: known_size = $50.3
2022-11-22 10:55:44,446 DEBUG on stmt: jump 169
2022-11-22 10:55:44,446 DEBUG ==== SSA block analysis pass on 60
2022-11-22 10:55:44,446 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,446 DEBUG on stmt: jump 62
2022-11-22 10:55:44,446 DEBUG ==== SSA block analysis pass on 62
2022-11-22 10:55:44,446 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,446 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,446 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,446 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,446 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,446 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,446 DEBUG ==== SSA block analysis pass on 70
2022-11-22 10:55:44,446 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,446 DEBUG on stmt: $70.3 = origsize != known_size
2022-11-22 10:55:44,446 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,446 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,446 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,447 DEBUG ==== SSA block analysis pass on 78
2022-11-22 10:55:44,447 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,447 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,447 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,447 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,447 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,447 DEBUG ==== SSA block analysis pass on 88
2022-11-22 10:55:44,447 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,447 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,447 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,447 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,447 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,447 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,448 DEBUG ==== SSA block analysis pass on 96
2022-11-22 10:55:44,448 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,448 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,448 DEBUG on stmt: $96.3 = known_size == $const96.2
2022-11-22 10:55:44,448 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,448 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,448 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,448 DEBUG ==== SSA block analysis pass on 104
2022-11-22 10:55:44,448 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,448 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,448 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,448 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,448 DEBUG on stmt: jump 138
2022-11-22 10:55:44,448 DEBUG ==== SSA block analysis pass on 118
2022-11-22 10:55:44,448 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,448 DEBUG on stmt: inferred = origsize // known_size
2022-11-22 10:55:44,448 DEBUG on stmt: $118.6 = origsize % known_size
2022-11-22 10:55:44,448 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,448 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,448 DEBUG on stmt: jump 138
2022-11-22 10:55:44,448 DEBUG ==== SSA block analysis pass on 138
2022-11-22 10:55:44,448 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,448 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,448 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,448 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,448 DEBUG ==== SSA block analysis pass on 142
2022-11-22 10:55:44,448 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,448 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,449 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,449 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,449 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,449 DEBUG ==== SSA block analysis pass on 150
2022-11-22 10:55:44,449 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,449 DEBUG on stmt: shape[neg_ax] = inferred
2022-11-22 10:55:44,449 DEBUG on stmt: jump 168
2022-11-22 10:55:44,449 DEBUG ==== SSA block analysis pass on 160
2022-11-22 10:55:44,449 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,449 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,449 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,449 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,449 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,449 DEBUG ==== SSA block analysis pass on 168
2022-11-22 10:55:44,449 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,449 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,449 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,449 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,449 DEBUG ==== SSA block analysis pass on 169
2022-11-22 10:55:44,449 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,449 DEBUG on stmt: jump 20
2022-11-22 10:55:44,450 DEBUG defs defaultdict(<class 'list'>,
            {'$102pred': [<numba.core.ir.Assign object at 0x7fe5456af4a8>],
             '$118.6': [<numba.core.ir.Assign object at 0x7fe5456afeb8>],
             '$12.1': [<numba.core.ir.Assign object at 0x7fe5456a56a0>],
             '$12.3': [<numba.core.ir.Assign object at 0x7fe5456a5828>],
             '$12.4': [<numba.core.ir.Assign object at 0x7fe5456a5908>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fe5456b4278>],
             '$142.1': [<numba.core.ir.Assign object at 0x7fe5456b43c8>],
             '$142.3': [<numba.core.ir.Assign object at 0x7fe5456b4588>],
             '$160.1': [<numba.core.ir.Assign object at 0x7fe5456b49e8>],
             '$160.3': [<numba.core.ir.Assign object at 0x7fe5456b4ba8>],
             '$168.2': [<numba.core.ir.Assign object at 0x7fe5456b4e48>],
             '$20.2': [<numba.core.ir.Assign object at 0x7fe5456a5ac8>],
             '$20.3': [<numba.core.ir.Assign object at 0x7fe5456a5b70>],
             '$20.4': [<numba.core.ir.Assign object at 0x7fe5456a5c18>],
             '$22.2': [<numba.core.ir.Assign object at 0x7fe5456a5fd0>],
             '$22.3': [<numba.core.ir.Assign object at 0x7fe5456a80b8>],
             '$22.4': [<numba.core.ir.Assign object at 0x7fe5456a5ef0>],
             '$22.7': [<numba.core.ir.Assign object at 0x7fe5456a8400>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fe5456a85f8>],
             '$36.3': [<numba.core.ir.Assign object at 0x7fe5456a88d0>],
             '$50.3': [<numba.core.ir.Assign object at 0x7fe5456a8d30>],
             '$62.3': [<numba.core.ir.Assign object at 0x7fe5456ac128>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fe5456ac320>],
             '$70.3': [<numba.core.ir.Assign object at 0x7fe5456ac5c0>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fe5456ac7b8>],
             '$78.1': [<numba.core.ir.Assign object at 0x7fe5456ac8d0>],
             '$78.3': [<numba.core.ir.Assign object at 0x7fe5456aca90>],
             '$88.3': [<numba.core.ir.Assign object at 0x7fe5456acdd8>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fe5456acfd0>],
             '$96.3': [<numba.core.ir.Assign object at 0x7fe5456af2e8>],
             '$const104.3': [<numba.core.ir.Assign object at 0x7fe5456af828>],
             '$const118.7': [<numba.core.ir.Assign object at 0x7fe5456aff98>],
             '$const142.2': [<numba.core.ir.Assign object at 0x7fe5456b44a8>],
             '$const160.2': [<numba.core.ir.Assign object at 0x7fe5456b4ac8>],
             '$const168.1': [<numba.core.ir.Assign object at 0x7fe5456b4d68>],
             '$const22.6': [<numba.core.ir.Assign object at 0x7fe5456a8358>],
             '$const36.2': [<numba.core.ir.Assign object at 0x7fe5456a87f0>],
             '$const62.2': [<numba.core.ir.Assign object at 0x7fe5456ac048>],
             '$const78.2': [<numba.core.ir.Assign object at 0x7fe5456ac9b0>],
             '$const88.2': [<numba.core.ir.Assign object at 0x7fe5456accf8>],
             '$const96.2': [<numba.core.ir.Assign object at 0x7fe5456af208>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x7fe5456a54e0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fe5456a5c88>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x7fe5456a5cf8>],
             '$phi60.2': [<numba.core.ir.Assign object at 0x7fe5456a5d68>],
             'ax': [<numba.core.ir.Assign object at 0x7fe5456a8128>],
             'bool102': [<numba.core.ir.Assign object at 0x7fe5456af400>],
             'bool140': [<numba.core.ir.Assign object at 0x7fe5456b41d0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fe5456a8518>],
             'bool68': [<numba.core.ir.Assign object at 0x7fe5456ac240>],
             'bool76': [<numba.core.ir.Assign object at 0x7fe5456ac6d8>],
             'bool94': [<numba.core.ir.Assign object at 0x7fe5456acef0>],
             'inferred': [<numba.core.ir.Assign object at 0x7fe5456af5f8>,
                          <numba.core.ir.Assign object at 0x7fe5456afc18>],
             'known_size': [<numba.core.ir.Assign object at 0x7fe5456a5400>,
                            <numba.core.ir.Assign object at 0x7fe5456a8da0>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fe5456a8a90>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fe5456a5278>,
                               <numba.core.ir.Assign object at 0x7fe5456a8940>],
             'ok': [<numba.core.ir.Assign object at 0x7fe5456af908>,
                    <numba.core.ir.Assign object at 0x7fe5456b40b8>],
             'origsize': [<numba.core.ir.Assign object at 0x7fe5456a50f0>],
             's': [<numba.core.ir.Assign object at 0x7fe5456a81d0>],
             'shape': [<numba.core.ir.Assign object at 0x7fe5456a5198>]})
2022-11-22 10:55:44,450 DEBUG SSA violators {'known_size', 'inferred', 'num_neg_value', 'ok'}
2022-11-22 10:55:44,450 DEBUG Fix SSA violator on var known_size
2022-11-22 10:55:44,450 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,450 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,450 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,450 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,450 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,450 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,450 DEBUG first assign: known_size
2022-11-22 10:55:44,451 DEBUG replaced with: known_size = const(int, 1)
2022-11-22 10:55:44,451 DEBUG on stmt: jump 10
2022-11-22 10:55:44,451 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,451 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,451 DEBUG on stmt: jump 12
2022-11-22 10:55:44,451 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,451 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,451 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,451 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,451 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,451 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,451 DEBUG on stmt: jump 20
2022-11-22 10:55:44,451 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,451 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,451 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,451 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,451 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,451 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,451 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,451 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,451 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,452 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,452 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,452 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,452 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,452 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,452 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,452 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,452 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,452 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,452 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,452 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,452 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,452 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,452 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,452 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,452 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,452 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,452 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,452 DEBUG on stmt: jump 169
2022-11-22 10:55:44,452 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,452 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,452 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,452 DEBUG on stmt: known_size = $50.3
2022-11-22 10:55:44,452 DEBUG replaced with: known_size.1 = $50.3
2022-11-22 10:55:44,452 DEBUG on stmt: jump 169
2022-11-22 10:55:44,452 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,452 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,452 DEBUG on stmt: jump 62
2022-11-22 10:55:44,453 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,453 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,453 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,453 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,453 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,453 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,453 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,453 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,453 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,453 DEBUG on stmt: $70.3 = origsize != known_size
2022-11-22 10:55:44,453 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,453 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,453 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,453 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,453 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,453 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,453 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,453 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,453 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,453 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,453 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,453 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,453 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,453 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,453 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,453 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,454 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,454 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,454 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,454 DEBUG on stmt: $96.3 = known_size == $const96.2
2022-11-22 10:55:44,454 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,454 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,454 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,454 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,454 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,454 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,454 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,454 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,454 DEBUG on stmt: jump 138
2022-11-22 10:55:44,454 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,454 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,454 DEBUG on stmt: inferred = origsize // known_size
2022-11-22 10:55:44,454 DEBUG on stmt: $118.6 = origsize % known_size
2022-11-22 10:55:44,454 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,455 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,455 DEBUG on stmt: jump 138
2022-11-22 10:55:44,455 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,455 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,455 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,455 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,455 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,455 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,455 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,455 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,455 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,455 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,455 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,455 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,455 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,455 DEBUG on stmt: shape[neg_ax] = inferred
2022-11-22 10:55:44,455 DEBUG on stmt: jump 168
2022-11-22 10:55:44,455 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,455 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,456 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,456 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,456 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,456 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,456 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,456 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,456 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,456 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,456 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,456 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,456 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692278>
2022-11-22 10:55:44,456 DEBUG on stmt: jump 20
2022-11-22 10:55:44,456 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe545692ba8>],
             50: [<numba.core.ir.Assign object at 0x7fe545692c18>]})
2022-11-22 10:55:44,457 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,457 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,457 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,457 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,457 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,457 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,457 DEBUG on stmt: jump 10
2022-11-22 10:55:44,457 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,457 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,458 DEBUG on stmt: jump 12
2022-11-22 10:55:44,458 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,458 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,458 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,458 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,458 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,458 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,458 DEBUG on stmt: jump 20
2022-11-22 10:55:44,458 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,458 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,458 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,458 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,458 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,458 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,458 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,458 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,458 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,458 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,459 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,459 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,459 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,459 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,459 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,459 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,459 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,459 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,459 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,459 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,459 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,459 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,459 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,459 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,459 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,459 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,459 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,459 DEBUG on stmt: jump 169
2022-11-22 10:55:44,459 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,459 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,459 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,459 DEBUG find_def var='known_size' stmt=$50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,459 DEBUG find_def_from_top label 50
2022-11-22 10:55:44,459 DEBUG idom 22 from label 50
2022-11-22 10:55:44,459 DEBUG find_def_from_bottom label 22
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 22
2022-11-22 10:55:44,460 DEBUG idom 20 from label 22
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 20
2022-11-22 10:55:44,460 DEBUG insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 169
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 169
2022-11-22 10:55:44,460 DEBUG insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 50
2022-11-22 10:55:44,460 DEBUG incoming_def known_size.1 = $50.3
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 36
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 36
2022-11-22 10:55:44,460 DEBUG idom 22 from label 36
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 22
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 22
2022-11-22 10:55:44,460 DEBUG idom 20 from label 22
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,460 DEBUG incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
2022-11-22 10:55:44,460 DEBUG incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,460 DEBUG find_def_from_bottom label 12
2022-11-22 10:55:44,460 DEBUG find_def_from_top label 12
2022-11-22 10:55:44,460 DEBUG idom 10 from label 12
2022-11-22 10:55:44,461 DEBUG find_def_from_bottom label 10
2022-11-22 10:55:44,461 DEBUG find_def_from_top label 10
2022-11-22 10:55:44,461 DEBUG idom 0 from label 10
2022-11-22 10:55:44,461 DEBUG find_def_from_bottom label 0
2022-11-22 10:55:44,461 DEBUG incoming_def known_size = const(int, 1)
2022-11-22 10:55:44,461 DEBUG replaced with: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,461 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,461 DEBUG on stmt: jump 169
2022-11-22 10:55:44,461 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,461 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,461 DEBUG on stmt: jump 62
2022-11-22 10:55:44,461 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,461 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,461 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,461 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,461 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,461 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,461 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,461 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,461 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,461 DEBUG on stmt: $70.3 = origsize != known_size
2022-11-22 10:55:44,461 DEBUG find_def var='known_size' stmt=$70.3 = origsize != known_size
2022-11-22 10:55:44,461 DEBUG find_def_from_top label 70
2022-11-22 10:55:44,461 DEBUG idom 62 from label 70
2022-11-22 10:55:44,461 DEBUG find_def_from_bottom label 62
2022-11-22 10:55:44,462 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,462 DEBUG idom 60 from label 62
2022-11-22 10:55:44,462 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,462 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,462 DEBUG idom 20 from label 60
2022-11-22 10:55:44,462 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,462 DEBUG replaced with: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,462 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,462 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,462 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,462 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,462 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,462 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,462 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,462 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,462 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,462 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,462 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,462 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,462 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,462 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,462 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,462 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,462 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,462 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,463 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,463 DEBUG on stmt: $96.3 = known_size == $const96.2
2022-11-22 10:55:44,463 DEBUG find_def var='known_size' stmt=$96.3 = known_size == $const96.2
2022-11-22 10:55:44,463 DEBUG find_def_from_top label 96
2022-11-22 10:55:44,463 DEBUG idom 88 from label 96
2022-11-22 10:55:44,463 DEBUG find_def_from_bottom label 88
2022-11-22 10:55:44,463 DEBUG find_def_from_top label 88
2022-11-22 10:55:44,463 DEBUG idom 62 from label 88
2022-11-22 10:55:44,463 DEBUG find_def_from_bottom label 62
2022-11-22 10:55:44,463 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,463 DEBUG idom 60 from label 62
2022-11-22 10:55:44,463 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,463 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,463 DEBUG idom 20 from label 60
2022-11-22 10:55:44,463 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,463 DEBUG replaced with: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,463 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,463 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,463 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,463 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,463 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,463 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,463 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,463 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,463 DEBUG on stmt: jump 138
2022-11-22 10:55:44,463 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,463 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,463 DEBUG on stmt: inferred = origsize // known_size
2022-11-22 10:55:44,464 DEBUG find_def var='known_size' stmt=inferred = origsize // known_size
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 118
2022-11-22 10:55:44,464 DEBUG idom 96 from label 118
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 96
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 96
2022-11-22 10:55:44,464 DEBUG idom 88 from label 96
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 88
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 88
2022-11-22 10:55:44,464 DEBUG idom 62 from label 88
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 62
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,464 DEBUG idom 60 from label 62
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,464 DEBUG idom 20 from label 60
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,464 DEBUG replaced with: inferred = origsize // known_size.2
2022-11-22 10:55:44,464 DEBUG on stmt: $118.6 = origsize % known_size
2022-11-22 10:55:44,464 DEBUG find_def var='known_size' stmt=$118.6 = origsize % known_size
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 118
2022-11-22 10:55:44,464 DEBUG idom 96 from label 118
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 96
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 96
2022-11-22 10:55:44,464 DEBUG idom 88 from label 96
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 88
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 88
2022-11-22 10:55:44,464 DEBUG idom 62 from label 88
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 62
2022-11-22 10:55:44,464 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,464 DEBUG idom 60 from label 62
2022-11-22 10:55:44,464 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,465 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,465 DEBUG idom 20 from label 60
2022-11-22 10:55:44,465 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,465 DEBUG replaced with: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,465 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,465 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,465 DEBUG on stmt: jump 138
2022-11-22 10:55:44,465 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,465 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,465 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,465 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,465 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,465 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,465 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,465 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,465 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,465 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,465 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,465 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,465 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,465 DEBUG on stmt: shape[neg_ax] = inferred
2022-11-22 10:55:44,465 DEBUG on stmt: jump 168
2022-11-22 10:55:44,465 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,465 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,465 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,465 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,465 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,466 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,466 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,466 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,466 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,466 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,466 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,466 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,466 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689940>
2022-11-22 10:55:44,466 DEBUG on stmt: jump 20
2022-11-22 10:55:44,466 DEBUG Fix SSA violator on var inferred
2022-11-22 10:55:44,466 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,466 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,466 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,467 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,467 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,467 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,467 DEBUG on stmt: jump 10
2022-11-22 10:55:44,467 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,467 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,467 DEBUG on stmt: jump 12
2022-11-22 10:55:44,467 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,467 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,467 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,467 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,467 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,467 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,467 DEBUG on stmt: jump 20
2022-11-22 10:55:44,467 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,467 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,467 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,467 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,467 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,467 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,467 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,467 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,467 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,467 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,467 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,467 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,468 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,468 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,468 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,468 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,468 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,468 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,468 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,468 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,468 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,468 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,468 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,468 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,468 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,468 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,468 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,468 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,468 DEBUG on stmt: jump 169
2022-11-22 10:55:44,468 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,468 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,468 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,468 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,468 DEBUG on stmt: jump 169
2022-11-22 10:55:44,468 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,468 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,468 DEBUG on stmt: jump 62
2022-11-22 10:55:44,468 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,468 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,468 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,469 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,469 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,469 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,469 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,469 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,469 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,469 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,469 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,469 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,469 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,469 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,469 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,469 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,469 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,469 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,469 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,469 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,469 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,469 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,469 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,469 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,469 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,469 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,469 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,469 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,469 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,469 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,470 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,470 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,470 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,470 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,470 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,470 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,470 DEBUG first assign: inferred
2022-11-22 10:55:44,470 DEBUG replaced with: inferred = const(int, 0)
2022-11-22 10:55:44,470 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,470 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,470 DEBUG on stmt: jump 138
2022-11-22 10:55:44,470 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,470 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,470 DEBUG on stmt: inferred = origsize // known_size.2
2022-11-22 10:55:44,470 DEBUG replaced with: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,470 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,470 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,470 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,470 DEBUG on stmt: jump 138
2022-11-22 10:55:44,470 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,470 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,470 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,471 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,471 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,471 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,471 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,471 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,471 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,471 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,471 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,471 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,471 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,471 DEBUG on stmt: shape[neg_ax] = inferred
2022-11-22 10:55:44,471 DEBUG on stmt: jump 168
2022-11-22 10:55:44,471 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,471 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,471 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,471 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,471 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,471 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,471 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,471 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,471 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,471 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,471 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,472 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,472 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe5456a8e10>
2022-11-22 10:55:44,472 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,472 DEBUG on stmt: jump 20
2022-11-22 10:55:44,472 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fe545692cf8>],
             118: [<numba.core.ir.Assign object at 0x7fe545692278>]})
2022-11-22 10:55:44,472 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,472 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,472 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,473 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,473 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,473 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,473 DEBUG on stmt: jump 10
2022-11-22 10:55:44,473 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,473 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,473 DEBUG on stmt: jump 12
2022-11-22 10:55:44,473 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,473 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,473 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,473 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,473 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,473 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,473 DEBUG on stmt: jump 20
2022-11-22 10:55:44,473 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,473 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,473 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,473 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,473 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,473 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,473 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,473 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,473 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,473 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,473 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,474 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,474 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,474 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,474 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,474 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,474 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,474 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,474 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,474 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,474 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,474 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,474 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,474 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,474 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,474 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,474 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,474 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,474 DEBUG on stmt: jump 169
2022-11-22 10:55:44,474 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,475 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,475 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,475 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,475 DEBUG on stmt: jump 169
2022-11-22 10:55:44,475 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,475 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,475 DEBUG on stmt: jump 62
2022-11-22 10:55:44,475 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,475 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,475 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,475 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,475 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,475 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,475 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,475 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,475 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,475 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,475 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,475 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,476 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,476 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,476 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,476 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,476 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,476 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,476 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,476 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,476 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,476 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,476 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,476 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,476 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,476 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,476 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,476 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,476 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,476 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,476 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,476 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,476 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,476 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,476 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,476 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,476 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,477 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,477 DEBUG on stmt: jump 138
2022-11-22 10:55:44,477 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,477 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,477 DEBUG on stmt: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,477 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,477 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,477 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,477 DEBUG on stmt: jump 138
2022-11-22 10:55:44,477 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,477 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,477 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,477 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,477 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,477 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,477 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,477 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,477 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,477 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,477 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,477 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,477 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,477 DEBUG on stmt: shape[neg_ax] = inferred
2022-11-22 10:55:44,477 DEBUG find_def var='inferred' stmt=shape[neg_ax] = inferred
2022-11-22 10:55:44,477 DEBUG find_def_from_top label 150
2022-11-22 10:55:44,478 DEBUG idom 138 from label 150
2022-11-22 10:55:44,478 DEBUG find_def_from_bottom label 138
2022-11-22 10:55:44,478 DEBUG find_def_from_top label 138
2022-11-22 10:55:44,478 DEBUG insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2022-11-22 10:55:44,478 DEBUG find_def_from_bottom label 104
2022-11-22 10:55:44,478 DEBUG incoming_def inferred = const(int, 0)
2022-11-22 10:55:44,478 DEBUG find_def_from_bottom label 118
2022-11-22 10:55:44,478 DEBUG incoming_def inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,478 DEBUG replaced with: shape[neg_ax] = inferred.2
2022-11-22 10:55:44,478 DEBUG on stmt: jump 168
2022-11-22 10:55:44,478 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,478 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,478 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,478 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,478 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,478 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,478 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,478 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,478 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,478 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,478 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,478 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,478 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689668>
2022-11-22 10:55:44,478 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,479 DEBUG on stmt: jump 20
2022-11-22 10:55:44,479 DEBUG Fix SSA violator on var num_neg_value
2022-11-22 10:55:44,479 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,479 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,479 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,479 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,479 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,479 DEBUG first assign: num_neg_value
2022-11-22 10:55:44,479 DEBUG replaced with: num_neg_value = const(int, 0)
2022-11-22 10:55:44,479 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,479 DEBUG on stmt: jump 10
2022-11-22 10:55:44,479 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,479 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,479 DEBUG on stmt: jump 12
2022-11-22 10:55:44,479 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,479 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,479 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,479 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,479 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,479 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,479 DEBUG on stmt: jump 20
2022-11-22 10:55:44,479 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,479 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,479 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,479 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,479 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,479 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,479 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,480 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,480 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,480 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,480 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,480 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,480 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,480 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,480 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,480 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,480 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,480 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,480 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,480 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,480 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,480 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,480 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,480 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,480 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,480 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,480 DEBUG on stmt: num_neg_value = $36.3
2022-11-22 10:55:44,480 DEBUG replaced with: num_neg_value.1 = $36.3
2022-11-22 10:55:44,480 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,480 DEBUG on stmt: jump 169
2022-11-22 10:55:44,480 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,480 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,480 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,480 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,480 DEBUG on stmt: jump 169
2022-11-22 10:55:44,481 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,481 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,481 DEBUG on stmt: jump 62
2022-11-22 10:55:44,481 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,481 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,481 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,481 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,481 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,481 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,481 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,481 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,481 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,481 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,481 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,481 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,481 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,481 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,481 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,481 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,481 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,481 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,481 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,481 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,481 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,481 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,481 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,481 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,481 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,482 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,482 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,482 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,482 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,482 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,482 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,482 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,482 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,482 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,482 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,482 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,482 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,482 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,482 DEBUG on stmt: jump 138
2022-11-22 10:55:44,482 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,482 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,482 DEBUG on stmt: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,483 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,483 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,483 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,483 DEBUG on stmt: jump 138
2022-11-22 10:55:44,483 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,483 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,483 DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2022-11-22 10:55:44,483 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,483 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,483 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,483 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,483 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,483 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,484 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,484 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,484 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,484 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,484 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,484 DEBUG on stmt: shape[neg_ax] = inferred.2
2022-11-22 10:55:44,484 DEBUG on stmt: jump 168
2022-11-22 10:55:44,484 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,484 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,484 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,484 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,484 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,484 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,484 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,484 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,484 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,484 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,484 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,484 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,484 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692208>
2022-11-22 10:55:44,484 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,484 DEBUG on stmt: jump 20
2022-11-22 10:55:44,485 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe545692860>],
             36: [<numba.core.ir.Assign object at 0x7fe545692940>]})
2022-11-22 10:55:44,485 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,485 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,485 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,485 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,485 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,485 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,485 DEBUG on stmt: jump 10
2022-11-22 10:55:44,485 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,485 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,485 DEBUG on stmt: jump 12
2022-11-22 10:55:44,485 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,485 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,485 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,486 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,486 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,486 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,486 DEBUG on stmt: jump 20
2022-11-22 10:55:44,486 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,486 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,486 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,486 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,487 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,487 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,487 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,487 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,487 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,487 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,487 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,487 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,487 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,487 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,487 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,487 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,487 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,487 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,487 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,487 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,487 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,488 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,488 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,488 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,488 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,488 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,488 DEBUG find_def var='num_neg_value' stmt=$36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,488 DEBUG find_def_from_top label 36
2022-11-22 10:55:44,488 DEBUG idom 22 from label 36
2022-11-22 10:55:44,488 DEBUG find_def_from_bottom label 22
2022-11-22 10:55:44,488 DEBUG find_def_from_top label 22
2022-11-22 10:55:44,488 DEBUG idom 20 from label 22
2022-11-22 10:55:44,488 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,488 DEBUG find_def_from_top label 20
2022-11-22 10:55:44,488 DEBUG insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2022-11-22 10:55:44,488 DEBUG find_def_from_bottom label 169
2022-11-22 10:55:44,488 DEBUG find_def_from_top label 169
2022-11-22 10:55:44,488 DEBUG insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
2022-11-22 10:55:44,488 DEBUG find_def_from_bottom label 50
2022-11-22 10:55:44,488 DEBUG find_def_from_top label 50
2022-11-22 10:55:44,488 DEBUG idom 22 from label 50
2022-11-22 10:55:44,488 DEBUG find_def_from_bottom label 22
2022-11-22 10:55:44,489 DEBUG find_def_from_top label 22
2022-11-22 10:55:44,489 DEBUG idom 20 from label 22
2022-11-22 10:55:44,489 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,489 DEBUG incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
2022-11-22 10:55:44,489 DEBUG find_def_from_bottom label 36
2022-11-22 10:55:44,489 DEBUG incoming_def num_neg_value.1 = $36.3
2022-11-22 10:55:44,489 DEBUG incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,489 DEBUG find_def_from_bottom label 12
2022-11-22 10:55:44,489 DEBUG find_def_from_top label 12
2022-11-22 10:55:44,489 DEBUG idom 10 from label 12
2022-11-22 10:55:44,489 DEBUG find_def_from_bottom label 10
2022-11-22 10:55:44,489 DEBUG find_def_from_top label 10
2022-11-22 10:55:44,489 DEBUG idom 0 from label 10
2022-11-22 10:55:44,489 DEBUG find_def_from_bottom label 0
2022-11-22 10:55:44,489 DEBUG incoming_def num_neg_value = const(int, 0)
2022-11-22 10:55:44,489 DEBUG replaced with: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,489 DEBUG on stmt: num_neg_value.1 = $36.3
2022-11-22 10:55:44,489 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,490 DEBUG on stmt: jump 169
2022-11-22 10:55:44,490 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,490 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,490 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,490 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,490 DEBUG on stmt: jump 169
2022-11-22 10:55:44,490 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,490 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,490 DEBUG on stmt: jump 62
2022-11-22 10:55:44,490 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,490 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,490 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,490 DEBUG on stmt: $62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,491 DEBUG find_def var='num_neg_value' stmt=$62.3 = num_neg_value == $const62.2
2022-11-22 10:55:44,491 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,491 DEBUG idom 60 from label 62
2022-11-22 10:55:44,491 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,491 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,491 DEBUG idom 20 from label 60
2022-11-22 10:55:44,491 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,491 DEBUG replaced with: $62.3 = num_neg_value.2 == $const62.2
2022-11-22 10:55:44,491 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,491 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,491 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,491 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,491 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,491 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,491 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,491 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,492 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,492 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,492 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,492 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,492 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,492 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,492 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,492 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,492 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,492 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,492 DEBUG on stmt: $88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,492 DEBUG find_def var='num_neg_value' stmt=$88.3 = num_neg_value == $const88.2
2022-11-22 10:55:44,492 DEBUG find_def_from_top label 88
2022-11-22 10:55:44,492 DEBUG idom 62 from label 88
2022-11-22 10:55:44,492 DEBUG find_def_from_bottom label 62
2022-11-22 10:55:44,492 DEBUG find_def_from_top label 62
2022-11-22 10:55:44,492 DEBUG idom 60 from label 62
2022-11-22 10:55:44,492 DEBUG find_def_from_bottom label 60
2022-11-22 10:55:44,492 DEBUG find_def_from_top label 60
2022-11-22 10:55:44,492 DEBUG idom 20 from label 60
2022-11-22 10:55:44,492 DEBUG find_def_from_bottom label 20
2022-11-22 10:55:44,492 DEBUG replaced with: $88.3 = num_neg_value.2 == $const88.2
2022-11-22 10:55:44,493 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,493 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,493 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,493 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,493 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,493 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,493 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,493 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,493 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,493 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,493 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,493 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,493 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,493 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,493 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,494 DEBUG on stmt: jump 138
2022-11-22 10:55:44,494 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,494 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,494 DEBUG on stmt: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,494 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,494 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,494 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,494 DEBUG on stmt: jump 138
2022-11-22 10:55:44,494 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,494 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,494 DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2022-11-22 10:55:44,494 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,494 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,494 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,494 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,494 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,494 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,494 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,494 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,494 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,494 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,494 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,495 DEBUG on stmt: shape[neg_ax] = inferred.2
2022-11-22 10:55:44,495 DEBUG on stmt: jump 168
2022-11-22 10:55:44,495 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,495 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,495 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,495 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,495 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,495 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,495 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,495 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,495 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,495 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,495 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,495 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,495 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689ac8>
2022-11-22 10:55:44,495 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,495 DEBUG on stmt: jump 20
2022-11-22 10:55:44,495 DEBUG Fix SSA violator on var ok
2022-11-22 10:55:44,495 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,495 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,495 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,495 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,495 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,495 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,495 DEBUG on stmt: jump 10
2022-11-22 10:55:44,495 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,495 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,496 DEBUG on stmt: jump 12
2022-11-22 10:55:44,496 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,496 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,496 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,496 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,496 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,496 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,496 DEBUG on stmt: jump 20
2022-11-22 10:55:44,496 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,496 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,496 DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,496 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,496 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,496 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,496 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,496 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,496 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,496 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,496 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,496 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,496 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,496 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,496 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,497 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,497 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,497 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,497 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,497 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,497 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,497 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,497 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,497 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,497 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,497 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,497 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,497 DEBUG on stmt: num_neg_value.1 = $36.3
2022-11-22 10:55:44,497 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,497 DEBUG on stmt: jump 169
2022-11-22 10:55:44,497 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,497 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,497 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,497 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,497 DEBUG on stmt: jump 169
2022-11-22 10:55:44,497 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,497 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,497 DEBUG on stmt: jump 62
2022-11-22 10:55:44,497 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,497 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,497 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,497 DEBUG on stmt: $62.3 = num_neg_value.2 == $const62.2
2022-11-22 10:55:44,497 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,497 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,498 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,498 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,498 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,498 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,498 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,498 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,498 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,498 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,498 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,498 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,498 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,498 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,498 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,498 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,498 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,498 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,498 DEBUG on stmt: $88.3 = num_neg_value.2 == $const88.2
2022-11-22 10:55:44,498 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,499 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,499 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,499 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,499 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,499 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,499 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,499 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,499 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,499 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,500 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,500 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,500 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,500 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,500 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,500 DEBUG first assign: ok
2022-11-22 10:55:44,500 DEBUG replaced with: ok = origsize == $const104.3
2022-11-22 10:55:44,500 DEBUG on stmt: jump 138
2022-11-22 10:55:44,500 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,500 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,500 DEBUG on stmt: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,500 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,500 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,500 DEBUG on stmt: ok = $118.6 == $const118.7
2022-11-22 10:55:44,500 DEBUG replaced with: ok.1 = $118.6 == $const118.7
2022-11-22 10:55:44,500 DEBUG on stmt: jump 138
2022-11-22 10:55:44,500 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,500 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,500 DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2022-11-22 10:55:44,500 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,500 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,501 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,501 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,501 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,501 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,501 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,501 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,501 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,501 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,501 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,501 DEBUG on stmt: shape[neg_ax] = inferred.2
2022-11-22 10:55:44,501 DEBUG on stmt: jump 168
2022-11-22 10:55:44,501 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,502 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,502 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,502 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,502 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,502 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,502 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,502 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,502 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,502 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,502 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,502 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,502 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545692a20>
2022-11-22 10:55:44,502 DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,502 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,502 DEBUG on stmt: jump 20
2022-11-22 10:55:44,502 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fe545689ba8>],
             118: [<numba.core.ir.Assign object at 0x7fe5456c79e8>]})
2022-11-22 10:55:44,503 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,503 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,503 DEBUG on stmt: origsize = arg(0, name=origsize)
2022-11-22 10:55:44,503 DEBUG on stmt: shape = arg(1, name=shape)
2022-11-22 10:55:44,503 DEBUG on stmt: num_neg_value = const(int, 0)
2022-11-22 10:55:44,503 DEBUG on stmt: known_size = const(int, 1)
2022-11-22 10:55:44,503 DEBUG on stmt: jump 10
2022-11-22 10:55:44,503 DEBUG ==== SSA block rewrite pass on 10
2022-11-22 10:55:44,503 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,503 DEBUG on stmt: jump 12
2022-11-22 10:55:44,503 DEBUG ==== SSA block rewrite pass on 12
2022-11-22 10:55:44,503 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,503 DEBUG on stmt: $12.1 = global(enumerate: <class 'enumerate'>)
2022-11-22 10:55:44,503 DEBUG on stmt: $12.3 = call $12.1(shape, func=$12.1, args=[Var(shape, arrayobj.py:1602)], kws=(), vararg=None)
2022-11-22 10:55:44,503 DEBUG on stmt: $12.4 = getiter(value=$12.3)
2022-11-22 10:55:44,503 DEBUG on stmt: $phi20.1 = $12.4
2022-11-22 10:55:44,503 DEBUG on stmt: jump 20
2022-11-22 10:55:44,503 DEBUG ==== SSA block rewrite pass on 20
2022-11-22 10:55:44,503 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,503 DEBUG on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1606), Var(num_neg_value, arrayobj.py:1602)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,503 DEBUG on stmt: known_size.2 = phi(incoming_values=[Var(known_size.3, arrayobj.py:1609), Var(known_size, arrayobj.py:1603)], incoming_blocks=[169, 12])
2022-11-22 10:55:44,503 DEBUG on stmt: $20.2 = iternext(value=$phi20.1)
2022-11-22 10:55:44,503 DEBUG on stmt: $20.3 = pair_first(value=$20.2)
2022-11-22 10:55:44,503 DEBUG on stmt: $20.4 = pair_second(value=$20.2)
2022-11-22 10:55:44,504 DEBUG on stmt: $phi22.1 = $20.3
2022-11-22 10:55:44,504 DEBUG on stmt: $phi60.1 = $20.3
2022-11-22 10:55:44,504 DEBUG on stmt: $phi60.2 = $phi20.1
2022-11-22 10:55:44,504 DEBUG on stmt: branch $20.4, 22, 60
2022-11-22 10:55:44,504 DEBUG ==== SSA block rewrite pass on 22
2022-11-22 10:55:44,504 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,504 DEBUG on stmt: $22.4 = exhaust_iter(value=$phi22.1, count=2)
2022-11-22 10:55:44,504 DEBUG on stmt: $22.2 = static_getitem(value=$22.4, index=0, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,504 DEBUG on stmt: $22.3 = static_getitem(value=$22.4, index=1, index_var=None, fn=<built-in function getitem>)
2022-11-22 10:55:44,504 DEBUG on stmt: ax = $22.2
2022-11-22 10:55:44,504 DEBUG on stmt: s = $22.3
2022-11-22 10:55:44,504 DEBUG on stmt: $const22.6 = const(int, 0)
2022-11-22 10:55:44,504 DEBUG on stmt: $22.7 = s < $const22.6
2022-11-22 10:55:44,504 DEBUG on stmt: bool34 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,504 DEBUG on stmt: $34pred = call bool34($22.7, func=bool34, args=(Var($22.7, arrayobj.py:1605),), kws=(), vararg=None)
2022-11-22 10:55:44,504 DEBUG on stmt: branch $34pred, 36, 50
2022-11-22 10:55:44,504 DEBUG ==== SSA block rewrite pass on 36
2022-11-22 10:55:44,505 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,505 DEBUG on stmt: $const36.2 = const(int, 1)
2022-11-22 10:55:44,505 DEBUG on stmt: $36.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,505 DEBUG on stmt: num_neg_value.1 = $36.3
2022-11-22 10:55:44,505 DEBUG on stmt: neg_ax = ax
2022-11-22 10:55:44,505 DEBUG on stmt: jump 169
2022-11-22 10:55:44,505 DEBUG ==== SSA block rewrite pass on 50
2022-11-22 10:55:44,505 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,505 DEBUG on stmt: $50.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,505 DEBUG on stmt: known_size.1 = $50.3
2022-11-22 10:55:44,505 DEBUG on stmt: jump 169
2022-11-22 10:55:44,505 DEBUG ==== SSA block rewrite pass on 60
2022-11-22 10:55:44,505 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,505 DEBUG on stmt: jump 62
2022-11-22 10:55:44,505 DEBUG ==== SSA block rewrite pass on 62
2022-11-22 10:55:44,505 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,505 DEBUG on stmt: $const62.2 = const(int, 0)
2022-11-22 10:55:44,505 DEBUG on stmt: $62.3 = num_neg_value.2 == $const62.2
2022-11-22 10:55:44,506 DEBUG on stmt: bool68 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,506 DEBUG on stmt: $68pred = call bool68($62.3, func=bool68, args=(Var($62.3, arrayobj.py:1611),), kws=(), vararg=None)
2022-11-22 10:55:44,506 DEBUG on stmt: branch $68pred, 70, 88
2022-11-22 10:55:44,506 DEBUG ==== SSA block rewrite pass on 70
2022-11-22 10:55:44,506 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,506 DEBUG on stmt: $70.3 = origsize != known_size.2
2022-11-22 10:55:44,506 DEBUG on stmt: bool76 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,506 DEBUG on stmt: $76pred = call bool76($70.3, func=bool76, args=(Var($70.3, arrayobj.py:1612),), kws=(), vararg=None)
2022-11-22 10:55:44,507 DEBUG on stmt: branch $76pred, 78, 168
2022-11-22 10:55:44,507 DEBUG ==== SSA block rewrite pass on 78
2022-11-22 10:55:44,507 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,507 DEBUG on stmt: $78.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,507 DEBUG on stmt: $const78.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,507 DEBUG on stmt: $78.3 = call $78.1($const78.2, func=$78.1, args=[Var($const78.2, arrayobj.py:1613)], kws=(), vararg=None)
2022-11-22 10:55:44,507 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,507 DEBUG ==== SSA block rewrite pass on 88
2022-11-22 10:55:44,507 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,507 DEBUG on stmt: $const88.2 = const(int, 1)
2022-11-22 10:55:44,507 DEBUG on stmt: $88.3 = num_neg_value.2 == $const88.2
2022-11-22 10:55:44,507 DEBUG on stmt: bool94 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,507 DEBUG on stmt: $94pred = call bool94($88.3, func=bool94, args=(Var($88.3, arrayobj.py:1615),), kws=(), vararg=None)
2022-11-22 10:55:44,507 DEBUG on stmt: branch $94pred, 96, 160
2022-11-22 10:55:44,507 DEBUG ==== SSA block rewrite pass on 96
2022-11-22 10:55:44,507 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,507 DEBUG on stmt: $const96.2 = const(int, 0)
2022-11-22 10:55:44,507 DEBUG on stmt: $96.3 = known_size.2 == $const96.2
2022-11-22 10:55:44,507 DEBUG on stmt: bool102 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,508 DEBUG on stmt: $102pred = call bool102($96.3, func=bool102, args=(Var($96.3, arrayobj.py:1617),), kws=(), vararg=None)
2022-11-22 10:55:44,508 DEBUG on stmt: branch $102pred, 104, 118
2022-11-22 10:55:44,508 DEBUG ==== SSA block rewrite pass on 104
2022-11-22 10:55:44,508 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,508 DEBUG on stmt: inferred = const(int, 0)
2022-11-22 10:55:44,508 DEBUG on stmt: $const104.3 = const(int, 0)
2022-11-22 10:55:44,508 DEBUG on stmt: ok = origsize == $const104.3
2022-11-22 10:55:44,508 DEBUG on stmt: jump 138
2022-11-22 10:55:44,508 DEBUG ==== SSA block rewrite pass on 118
2022-11-22 10:55:44,508 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,508 DEBUG on stmt: inferred.1 = origsize // known_size.2
2022-11-22 10:55:44,508 DEBUG on stmt: $118.6 = origsize % known_size.2
2022-11-22 10:55:44,508 DEBUG on stmt: $const118.7 = const(int, 0)
2022-11-22 10:55:44,508 DEBUG on stmt: ok.1 = $118.6 == $const118.7
2022-11-22 10:55:44,509 DEBUG on stmt: jump 138
2022-11-22 10:55:44,509 DEBUG ==== SSA block rewrite pass on 138
2022-11-22 10:55:44,509 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,509 DEBUG on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1618), Var(inferred.1, arrayobj.py:1621)], incoming_blocks=[104, 118])
2022-11-22 10:55:44,509 DEBUG on stmt: bool140 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,509 DEBUG on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,509 DEBUG find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1619),), kws=(), vararg=None)
2022-11-22 10:55:44,509 DEBUG find_def_from_top label 138
2022-11-22 10:55:44,509 DEBUG insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2022-11-22 10:55:44,509 DEBUG find_def_from_bottom label 104
2022-11-22 10:55:44,509 DEBUG incoming_def ok = origsize == $const104.3
2022-11-22 10:55:44,509 DEBUG find_def_from_bottom label 118
2022-11-22 10:55:44,509 DEBUG incoming_def ok.1 = $118.6 == $const118.7
2022-11-22 10:55:44,509 DEBUG replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1623),), kws=(), vararg=None)
2022-11-22 10:55:44,510 DEBUG on stmt: branch $140pred, 150, 142
2022-11-22 10:55:44,510 DEBUG ==== SSA block rewrite pass on 142
2022-11-22 10:55:44,510 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,510 DEBUG on stmt: $142.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,510 DEBUG on stmt: $const142.2 = const(str, total size of new array must be unchanged)
2022-11-22 10:55:44,510 DEBUG on stmt: $142.3 = call $142.1($const142.2, func=$142.1, args=[Var($const142.2, arrayobj.py:1624)], kws=(), vararg=None)
2022-11-22 10:55:44,510 DEBUG on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2022-11-22 10:55:44,510 DEBUG ==== SSA block rewrite pass on 150
2022-11-22 10:55:44,510 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,510 DEBUG on stmt: shape[neg_ax] = inferred.2
2022-11-22 10:55:44,510 DEBUG on stmt: jump 168
2022-11-22 10:55:44,510 DEBUG ==== SSA block rewrite pass on 160
2022-11-22 10:55:44,510 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,510 DEBUG on stmt: $160.1 = global(ValueError: <class 'ValueError'>)
2022-11-22 10:55:44,510 DEBUG on stmt: $const160.2 = const(str, multiple negative shape values)
2022-11-22 10:55:44,510 DEBUG on stmt: $160.3 = call $160.1($const160.2, func=$160.1, args=[Var($const160.2, arrayobj.py:1628)], kws=(), vararg=None)
2022-11-22 10:55:44,510 DEBUG on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2022-11-22 10:55:44,510 DEBUG ==== SSA block rewrite pass on 168
2022-11-22 10:55:44,510 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,510 DEBUG on stmt: $const168.1 = const(NoneType, None)
2022-11-22 10:55:44,510 DEBUG on stmt: $168.2 = cast(value=$const168.1)
2022-11-22 10:55:44,510 DEBUG on stmt: return $168.2
2022-11-22 10:55:44,510 DEBUG ==== SSA block rewrite pass on 169
2022-11-22 10:55:44,510 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545689978>
2022-11-22 10:55:44,510 DEBUG on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1606), Var(num_neg_value.1, arrayobj.py:1606)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,510 DEBUG on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1609), Var(known_size.2, arrayobj.py:1609)], incoming_blocks=[50, 36])
2022-11-22 10:55:44,511 DEBUG on stmt: jump 20
2022-11-22 10:55:44,701 DEBUG label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $0.1 = freevar(tp: float64)              ['$0.1']
    $const0.2 = const(int, 1)                ['$const0.2']
    r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None) ['$0.1', '$const0.2', 'r']
    $0.4 = freevar(tp: float64)              ['$0.4']
    a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None) ['$0.4', 'a', 'a.1']
    $const0.8 = const(int, 0)                ['$const0.8']
    $0.9 = b < $const0.8                     ['$0.9', '$const0.8', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None) ['$0.9', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const26.5 = const(int, 0)               ['$const26.5']
    $26.6 = exp < $const26.5                 ['$26.6', '$const26.5', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None) ['$26.6', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44.1 = global(OverflowError: <class 'OverflowError'>) ['$44.1']
    raise $44.1                              ['$44.1']
label 48:
    $48.1 = freevar(is_integer: False)       ['$48.1']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None) ['$48.1', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const52.2 = const(int, 0)               ['$const52.2']
    $52.3 = a.1 == $const52.2                ['$52.3', '$const52.2', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($52.3, func=bool58, args=(Var($52.3, numbers.py:225),), kws=(), vararg=None) ['$52.3', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60.1 = freevar(zerodiv_return: False)   ['$60.1']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60.1, func=bool62, args=(Var($60.1, numbers.py:226),), kws=(), vararg=None) ['$60.1', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64.1 = freevar(zerodiv_return: False)   ['$64.1']
    $64.2 = cast(value=$64.1)                ['$64.1', '$64.2']
    return $64.2                             ['$64.2']
label 68:
    $68.1 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68.1']
    $const68.2 = const(str, 0 cannot be raised to a negative power) ['$const68.2']
    $68.3 = call $68.1($const68.2, func=$68.1, args=[Var($const68.2, numbers.py:229)], kws=(), vararg=None) ['$68.1', '$68.3', '$const68.2']
    raise $68.3                              ['$68.3']
label 76:
    $const76.2 = const(int, 1)               ['$const76.2']
    $76.3 = a.1 != $const76.2                ['$76.3', '$const76.2', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($76.3, func=bool82, args=(Var($76.3, numbers.py:230),), kws=(), vararg=None) ['$76.3', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const84.2 = const(int, -1)              ['$const84.2']
    $84.3 = a.1 != $const84.2                ['$84.3', '$const84.2', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($84.3, func=bool90, args=(Var($84.3, numbers.py:230),), kws=(), vararg=None) ['$84.3', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.1 = const(int, 0)               ['$const92.1']
    $92.2 = cast(value=$const92.1)           ['$92.2', '$const92.1']
    return $92.2                             ['$92.2']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const106.2 = const(int, 65536)          ['$const106.2']
    $106.3 = exp > $const106.2               ['$106.3', '$const106.2', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None) ['$106.3', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>) ['$114.1']
    $114.2 = getattr(value=$114.1, attr=pow) ['$114.1', '$114.2']
    $114.4 = global(float: <class 'float'>)  ['$114.4']
    $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None) ['$114.4', '$114.6', 'b']
    $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None) ['$114.2', '$114.6', '$114.7', 'a.1']
    $114.8 = cast(value=$114.7)              ['$114.7', '$114.8']
    return $114.8                            ['$114.8']
label 130:
    jump 132                                 []
label 132:
    $const132.2 = const(int, 0)              ['$const132.2']
    $132.3 = exp != $const132.2              ['$132.3', '$const132.2', 'exp']
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None) ['$132.3', '$138pred', 'bool138']
    branch $138pred, 140, 174                ['$138pred']
label 140:
    $const140.2 = const(int, 1)              ['$const140.2']
    $140.3 = exp & $const140.2               ['$140.3', '$const140.2', 'exp']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None) ['$140.3', '$146pred', 'bool146']
    branch $146pred, 148, 156                ['$146pred']
label 148:
    $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$148.3', 'a.1', 'r']
    r = $148.3                               ['$148.3', 'r']
    jump 156                                 []
label 156:
    $const156.2 = const(int, 1)              ['$const156.2']
    $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined) ['$156.3', '$const156.2', 'exp']
    exp = $156.3                             ['$156.3', 'exp']
    $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$156.6', 'a.1', 'a.1']
    a.1 = $156.6                             ['$156.6', 'a.1']
    jump 132                                 []
label 174:
    jump 176                                 []
label 176:
    bool178 = global(bool: <class 'bool'>)   ['bool178']
    $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None) ['$178pred', 'bool178', 'invert']
    branch $178pred, 180, 188                ['$178pred']
label 180:
    $const180.1 = const(float, 1.0)          ['$const180.1']
    $180.3 = $const180.1 / r                 ['$180.3', '$const180.1', 'r']
    $180.4 = cast(value=$180.3)              ['$180.3', '$180.4']
    return $180.4                            ['$180.4']
label 188:
    $188.2 = cast(value=r)                   ['$188.2', 'r']
    return $188.2                            ['$188.2']

2022-11-22 10:55:44,715 DEBUG ==== SSA block analysis pass on 0
2022-11-22 10:55:44,715 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,715 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,715 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,715 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,715 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,715 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,715 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,715 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,715 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,715 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,716 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,716 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,716 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,716 DEBUG ==== SSA block analysis pass on 26
2022-11-22 10:55:44,716 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,716 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,716 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,716 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,716 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,716 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,716 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,716 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,716 DEBUG ==== SSA block analysis pass on 44
2022-11-22 10:55:44,716 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,716 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,716 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,716 DEBUG ==== SSA block analysis pass on 48
2022-11-22 10:55:44,716 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,716 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,716 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,716 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,716 DEBUG on stmt: jump 106
2022-11-22 10:55:44,716 DEBUG ==== SSA block analysis pass on 98
2022-11-22 10:55:44,716 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,716 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,716 DEBUG on stmt: exp = b
2022-11-22 10:55:44,716 DEBUG on stmt: jump 106
2022-11-22 10:55:44,716 DEBUG ==== SSA block analysis pass on 106
2022-11-22 10:55:44,717 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,717 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,717 DEBUG on stmt: $106.3 = exp > $const106.2
2022-11-22 10:55:44,717 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,717 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,717 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,717 DEBUG ==== SSA block analysis pass on 114
2022-11-22 10:55:44,717 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,717 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,717 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,717 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,717 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,717 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,717 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,717 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,717 DEBUG ==== SSA block analysis pass on 130
2022-11-22 10:55:44,717 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,717 DEBUG on stmt: jump 132
2022-11-22 10:55:44,717 DEBUG ==== SSA block analysis pass on 132
2022-11-22 10:55:44,717 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,717 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,717 DEBUG on stmt: $132.3 = exp != $const132.2
2022-11-22 10:55:44,717 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,717 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,717 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,717 DEBUG ==== SSA block analysis pass on 140
2022-11-22 10:55:44,717 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,718 DEBUG on stmt: $140.3 = exp & $const140.2
2022-11-22 10:55:44,718 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,718 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,718 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,718 DEBUG ==== SSA block analysis pass on 148
2022-11-22 10:55:44,718 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,718 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,718 DEBUG on stmt: jump 156
2022-11-22 10:55:44,718 DEBUG ==== SSA block analysis pass on 156
2022-11-22 10:55:44,718 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,718 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,718 DEBUG on stmt: exp = $156.3
2022-11-22 10:55:44,718 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,718 DEBUG on stmt: a.1 = $156.6
2022-11-22 10:55:44,718 DEBUG on stmt: jump 132
2022-11-22 10:55:44,718 DEBUG ==== SSA block analysis pass on 174
2022-11-22 10:55:44,718 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: jump 176
2022-11-22 10:55:44,718 DEBUG ==== SSA block analysis pass on 176
2022-11-22 10:55:44,718 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,718 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,718 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,718 DEBUG ==== SSA block analysis pass on 180
2022-11-22 10:55:44,718 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,718 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,719 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,719 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,719 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,719 DEBUG ==== SSA block analysis pass on 188
2022-11-22 10:55:44,719 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,719 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,719 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,719 DEBUG defs defaultdict(<class 'list'>,
            {'$0.1': [<numba.core.ir.Assign object at 0x7fe54594af60>],
             '$0.4': [<numba.core.ir.Assign object at 0x7fe5459552e8>],
             '$0.9': [<numba.core.ir.Assign object at 0x7fe545955780>],
             '$106.3': [<numba.core.ir.Assign object at 0x7fe54595e630>],
             '$112pred': [<numba.core.ir.Assign object at 0x7fe54595e7f0>],
             '$114.1': [<numba.core.ir.Assign object at 0x7fe54595e940>],
             '$114.2': [<numba.core.ir.Assign object at 0x7fe54595ea20>],
             '$114.4': [<numba.core.ir.Assign object at 0x7fe54595eba8>],
             '$114.6': [<numba.core.ir.Assign object at 0x7fe54595ed30>],
             '$114.7': [<numba.core.ir.Assign object at 0x7fe54595ee10>],
             '$114.8': [<numba.core.ir.Assign object at 0x7fe54595eef0>],
             '$132.3': [<numba.core.ir.Assign object at 0x7fe5459622b0>],
             '$138pred': [<numba.core.ir.Assign object at 0x7fe545962470>],
             '$140.3': [<numba.core.ir.Assign object at 0x7fe545962748>],
             '$146pred': [<numba.core.ir.Assign object at 0x7fe545962908>],
             '$148.3': [<numba.core.ir.Assign object at 0x7fe545962ba8>],
             '$156.3': [<numba.core.ir.Assign object at 0x7fe545962eb8>],
             '$156.6': [<numba.core.ir.Assign object at 0x7fe545968198>],
             '$178pred': [<numba.core.ir.Assign object at 0x7fe545968518>],
             '$180.3': [<numba.core.ir.Assign object at 0x7fe5459687f0>],
             '$180.4': [<numba.core.ir.Assign object at 0x7fe5459688d0>],
             '$188.2': [<numba.core.ir.Assign object at 0x7fe545968ac8>],
             '$24pred': [<numba.core.ir.Assign object at 0x7fe545955978>],
             '$26.6': [<numba.core.ir.Assign object at 0x7fe545955f60>],
             '$42pred': [<numba.core.ir.Assign object at 0x7fe545957198>],
             '$44.1': [<numba.core.ir.Assign object at 0x7fe545957240>],
             '$48.1': [<numba.core.ir.Assign object at 0x7fe545957400>],
             '$50pred': [<numba.core.ir.Assign object at 0x7fe5459575f8>],
             '$const0.2': [<numba.core.ir.Assign object at 0x7fe545955080>],
             '$const0.8': [<numba.core.ir.Assign object at 0x7fe5459556d8>],
             '$const106.2': [<numba.core.ir.Assign object at 0x7fe54595e550>],
             '$const132.2': [<numba.core.ir.Assign object at 0x7fe5459621d0>],
             '$const140.2': [<numba.core.ir.Assign object at 0x7fe545962668>],
             '$const156.2': [<numba.core.ir.Assign object at 0x7fe545962dd8>],
             '$const180.1': [<numba.core.ir.Assign object at 0x7fe545968668>],
             '$const26.5': [<numba.core.ir.Assign object at 0x7fe545955e80>],
             'a': [<numba.core.ir.Assign object at 0x7fe54594add8>],
             'a.1': [<numba.core.ir.Assign object at 0x7fe545955470>,
                     <numba.core.ir.Assign object at 0x7fe545968208>],
             'b': [<numba.core.ir.Assign object at 0x7fe54594ae80>],
             'bool112': [<numba.core.ir.Assign object at 0x7fe54595e748>],
             'bool138': [<numba.core.ir.Assign object at 0x7fe5459623c8>],
             'bool146': [<numba.core.ir.Assign object at 0x7fe545962860>],
             'bool178': [<numba.core.ir.Assign object at 0x7fe545968470>],
             'bool24': [<numba.core.ir.Assign object at 0x7fe545955898>],
             'bool42': [<numba.core.ir.Assign object at 0x7fe5459570b8>],
             'bool50': [<numba.core.ir.Assign object at 0x7fe545957518>],
             'exp': [<numba.core.ir.Assign object at 0x7fe545955c50>,
                     <numba.core.ir.Assign object at 0x7fe54595e3c8>,
                     <numba.core.ir.Assign object at 0x7fe545962f28>],
             'invert': [<numba.core.ir.Assign object at 0x7fe545955a20>,
                        <numba.core.ir.Assign object at 0x7fe54595e240>],
             'r': [<numba.core.ir.Assign object at 0x7fe545955160>,
                   <numba.core.ir.Assign object at 0x7fe545962c18>]})
2022-11-22 10:55:44,719 DEBUG SSA violators {'exp', 'a.1', 'r', 'invert'}
2022-11-22 10:55:44,719 DEBUG Fix SSA violator on var exp
2022-11-22 10:55:44,719 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,719 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,719 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,719 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,719 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,720 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,720 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,720 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,720 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,720 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,720 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,720 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,720 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,720 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,720 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,720 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,720 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,720 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,720 DEBUG first assign: exp
2022-11-22 10:55:44,720 DEBUG replaced with: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,720 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,720 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,720 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,720 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,720 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,720 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,720 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,720 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,720 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,720 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,720 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,721 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,721 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,721 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,721 DEBUG on stmt: jump 106
2022-11-22 10:55:44,721 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,721 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,721 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,721 DEBUG on stmt: exp = b
2022-11-22 10:55:44,721 DEBUG replaced with: exp.1 = b
2022-11-22 10:55:44,721 DEBUG on stmt: jump 106
2022-11-22 10:55:44,721 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,721 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,721 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,721 DEBUG on stmt: $106.3 = exp > $const106.2
2022-11-22 10:55:44,721 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,721 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,721 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,721 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,721 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,721 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,721 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,721 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,721 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,721 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,721 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,721 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,722 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,722 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,722 DEBUG on stmt: jump 132
2022-11-22 10:55:44,722 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,722 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,722 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,722 DEBUG on stmt: $132.3 = exp != $const132.2
2022-11-22 10:55:44,722 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,722 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,722 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,722 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,722 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,722 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,722 DEBUG on stmt: $140.3 = exp & $const140.2
2022-11-22 10:55:44,722 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,722 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,722 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,722 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,722 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,722 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,722 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,722 DEBUG on stmt: jump 156
2022-11-22 10:55:44,722 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,722 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,722 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,722 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,723 DEBUG on stmt: exp = $156.3
2022-11-22 10:55:44,723 DEBUG replaced with: exp.2 = $156.3
2022-11-22 10:55:44,723 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,723 DEBUG on stmt: a.1 = $156.6
2022-11-22 10:55:44,723 DEBUG on stmt: jump 132
2022-11-22 10:55:44,723 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,723 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,723 DEBUG on stmt: jump 176
2022-11-22 10:55:44,723 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,723 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,723 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,723 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,723 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,723 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,723 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,723 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,723 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,723 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,723 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,723 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,724 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,724 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,724 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,724 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fe545968588>],
             98: [<numba.core.ir.Assign object at 0x7fe545968cf8>],
             156: [<numba.core.ir.Assign object at 0x7fe5459408d0>]})
2022-11-22 10:55:44,724 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,724 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,724 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,724 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,724 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,724 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,724 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,724 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,724 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,724 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,724 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,724 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,724 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,724 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,724 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,725 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,725 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,725 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,725 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,725 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,725 DEBUG find_def var='exp' stmt=$26.6 = exp < $const26.5
2022-11-22 10:55:44,725 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,725 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,725 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,725 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,725 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,725 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,725 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,725 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,725 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,725 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,725 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,725 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,725 DEBUG on stmt: jump 106
2022-11-22 10:55:44,725 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,725 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,725 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,725 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,725 DEBUG on stmt: jump 106
2022-11-22 10:55:44,725 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,725 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,726 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,726 DEBUG on stmt: $106.3 = exp > $const106.2
2022-11-22 10:55:44,726 DEBUG find_def var='exp' stmt=$106.3 = exp > $const106.2
2022-11-22 10:55:44,726 DEBUG find_def_from_top label 106
2022-11-22 10:55:44,726 DEBUG insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2022-11-22 10:55:44,726 DEBUG find_def_from_bottom label 48
2022-11-22 10:55:44,726 DEBUG find_def_from_top label 48
2022-11-22 10:55:44,726 DEBUG idom 26 from label 48
2022-11-22 10:55:44,726 DEBUG find_def_from_bottom label 26
2022-11-22 10:55:44,726 DEBUG incoming_def exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,726 DEBUG find_def_from_bottom label 98
2022-11-22 10:55:44,726 DEBUG incoming_def exp.1 = b
2022-11-22 10:55:44,726 DEBUG replaced with: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,726 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,726 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,726 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,726 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,726 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,726 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,726 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,726 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,726 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,726 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,726 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,727 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,727 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,727 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,727 DEBUG on stmt: jump 132
2022-11-22 10:55:44,727 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,727 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,727 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,727 DEBUG on stmt: $132.3 = exp != $const132.2
2022-11-22 10:55:44,727 DEBUG find_def var='exp' stmt=$132.3 = exp != $const132.2
2022-11-22 10:55:44,727 DEBUG find_def_from_top label 132
2022-11-22 10:55:44,727 DEBUG insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 132
2022-11-22 10:55:44,727 DEBUG find_def_from_bottom label 130
2022-11-22 10:55:44,727 DEBUG find_def_from_top label 130
2022-11-22 10:55:44,727 DEBUG idom 106 from label 130
2022-11-22 10:55:44,727 DEBUG find_def_from_bottom label 106
2022-11-22 10:55:44,727 DEBUG incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,727 DEBUG find_def_from_bottom label 156
2022-11-22 10:55:44,727 DEBUG incoming_def exp.2 = $156.3
2022-11-22 10:55:44,727 DEBUG replaced with: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,727 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,727 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,727 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,727 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,727 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,727 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,727 DEBUG on stmt: $140.3 = exp & $const140.2
2022-11-22 10:55:44,727 DEBUG find_def var='exp' stmt=$140.3 = exp & $const140.2
2022-11-22 10:55:44,728 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,728 DEBUG idom 132 from label 140
2022-11-22 10:55:44,728 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,728 DEBUG replaced with: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,728 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,728 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,728 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,728 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,728 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,728 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,728 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,728 DEBUG on stmt: jump 156
2022-11-22 10:55:44,728 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,728 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,728 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,728 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,728 DEBUG find_def var='exp' stmt=$156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,728 DEBUG find_def_from_top label 156
2022-11-22 10:55:44,728 DEBUG idom 140 from label 156
2022-11-22 10:55:44,728 DEBUG find_def_from_bottom label 140
2022-11-22 10:55:44,728 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,728 DEBUG idom 132 from label 140
2022-11-22 10:55:44,728 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,728 DEBUG replaced with: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,728 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,728 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,729 DEBUG on stmt: a.1 = $156.6
2022-11-22 10:55:44,729 DEBUG on stmt: jump 132
2022-11-22 10:55:44,729 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,729 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,729 DEBUG on stmt: jump 176
2022-11-22 10:55:44,729 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,729 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,729 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,729 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,729 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,729 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,729 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,729 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,729 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,729 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,729 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,729 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,729 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940978>
2022-11-22 10:55:44,729 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,729 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,729 DEBUG Fix SSA violator on var a.1
2022-11-22 10:55:44,729 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,729 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,729 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,729 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,729 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,730 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,730 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,730 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG first assign: a.1
2022-11-22 10:55:44,730 DEBUG replaced with: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,730 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,730 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,730 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,730 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,730 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,730 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,730 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,730 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,730 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,730 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,730 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,730 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,730 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,730 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,730 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,730 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,730 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,730 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,730 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,730 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,730 DEBUG on stmt: jump 106
2022-11-22 10:55:44,730 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,731 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,731 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,731 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,731 DEBUG on stmt: jump 106
2022-11-22 10:55:44,731 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,731 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,731 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,731 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,731 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,731 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,731 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,731 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,731 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,731 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,731 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,731 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,731 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,731 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,731 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,731 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,731 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,731 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,731 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,731 DEBUG on stmt: jump 132
2022-11-22 10:55:44,731 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,731 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,731 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,731 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,731 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,731 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,732 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,732 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,732 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,732 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,732 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,732 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,732 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,732 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,732 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,732 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,732 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,732 DEBUG on stmt: jump 156
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,732 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,732 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,732 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,732 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,732 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,732 DEBUG on stmt: a.1 = $156.6
2022-11-22 10:55:44,732 DEBUG replaced with: a.1.1 = $156.6
2022-11-22 10:55:44,732 DEBUG on stmt: jump 132
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,732 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,732 DEBUG on stmt: jump 176
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,732 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,732 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,732 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,732 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,732 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,733 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,733 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,733 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,733 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,733 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,733 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,733 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545940a20>
2022-11-22 10:55:44,733 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,733 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,733 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe545940160>],
             156: [<numba.core.ir.Assign object at 0x7fe54594a400>]})
2022-11-22 10:55:44,733 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,733 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,733 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,733 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,733 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,733 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,733 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,733 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,733 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,733 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,733 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,733 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,733 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,733 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,734 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,734 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,734 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,734 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,734 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,734 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,734 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,734 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,734 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,734 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,734 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,734 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,734 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,734 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,734 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,734 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,734 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,734 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,734 DEBUG on stmt: jump 106
2022-11-22 10:55:44,734 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,734 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,734 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,734 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,734 DEBUG on stmt: jump 106
2022-11-22 10:55:44,734 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,734 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,734 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,734 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,734 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,734 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,734 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,735 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,735 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,735 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,735 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,735 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,735 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,735 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,735 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,735 DEBUG find_def var='a.1' stmt=$114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,735 DEBUG find_def_from_top label 114
2022-11-22 10:55:44,735 DEBUG idom 106 from label 114
2022-11-22 10:55:44,735 DEBUG find_def_from_bottom label 106
2022-11-22 10:55:44,735 DEBUG find_def_from_top label 106
2022-11-22 10:55:44,735 DEBUG idom 0 from label 106
2022-11-22 10:55:44,735 DEBUG find_def_from_bottom label 0
2022-11-22 10:55:44,735 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,735 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,735 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,735 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,735 DEBUG on stmt: jump 132
2022-11-22 10:55:44,735 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,735 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,735 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,735 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,735 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,735 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,735 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,735 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,735 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,735 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,736 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,736 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,736 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,736 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,736 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,736 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,736 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,736 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,736 DEBUG find_def var='a.1' stmt=$148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,736 DEBUG find_def_from_top label 148
2022-11-22 10:55:44,736 DEBUG idom 140 from label 148
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 140
2022-11-22 10:55:44,736 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,736 DEBUG idom 132 from label 140
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,736 DEBUG find_def_from_top label 132
2022-11-22 10:55:44,736 DEBUG insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 132
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 130
2022-11-22 10:55:44,736 DEBUG find_def_from_top label 130
2022-11-22 10:55:44,736 DEBUG idom 106 from label 130
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 106
2022-11-22 10:55:44,736 DEBUG find_def_from_top label 106
2022-11-22 10:55:44,736 DEBUG idom 0 from label 106
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 0
2022-11-22 10:55:44,736 DEBUG incoming_def a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,736 DEBUG find_def_from_bottom label 156
2022-11-22 10:55:44,736 DEBUG incoming_def a.1.1 = $156.6
2022-11-22 10:55:44,736 DEBUG replaced with: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,736 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,736 DEBUG on stmt: jump 156
2022-11-22 10:55:44,736 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,737 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,737 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,737 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,737 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,737 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,737 DEBUG find_def var='a.1' stmt=$156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,737 DEBUG find_def_from_top label 156
2022-11-22 10:55:44,737 DEBUG idom 140 from label 156
2022-11-22 10:55:44,737 DEBUG find_def_from_bottom label 140
2022-11-22 10:55:44,737 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,737 DEBUG idom 132 from label 140
2022-11-22 10:55:44,737 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,737 DEBUG replaced with: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,737 DEBUG on stmt: a.1.1 = $156.6
2022-11-22 10:55:44,737 DEBUG on stmt: jump 132
2022-11-22 10:55:44,737 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,737 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,737 DEBUG on stmt: jump 176
2022-11-22 10:55:44,737 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,737 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,737 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,737 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,737 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,737 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,737 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,737 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,737 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,737 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,737 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,737 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,737 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe54594a048>
2022-11-22 10:55:44,737 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,738 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,738 DEBUG Fix SSA violator on var r
2022-11-22 10:55:44,738 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,738 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,738 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,738 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,738 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,738 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,738 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,738 DEBUG first assign: r
2022-11-22 10:55:44,738 DEBUG replaced with: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,738 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,738 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,738 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,738 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,738 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,738 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,738 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,738 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,738 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,738 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,738 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,738 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,738 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,738 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,738 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,738 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,738 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,738 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,738 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,739 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,739 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,739 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,739 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,739 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,739 DEBUG on stmt: jump 106
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,739 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,739 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,739 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,739 DEBUG on stmt: jump 106
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,739 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,739 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,739 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,739 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,739 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,739 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,739 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,739 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,739 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,739 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,739 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,739 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,739 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,739 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,739 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,739 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,739 DEBUG on stmt: jump 132
2022-11-22 10:55:44,739 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,740 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,740 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,740 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,740 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,740 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,740 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,740 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,740 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,740 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,740 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,740 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,740 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,740 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,740 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,740 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,740 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,740 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,740 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,740 DEBUG on stmt: r = $148.3
2022-11-22 10:55:44,740 DEBUG replaced with: r.1 = $148.3
2022-11-22 10:55:44,740 DEBUG on stmt: jump 156
2022-11-22 10:55:44,740 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,740 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,740 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,740 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,740 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,740 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,740 DEBUG on stmt: a.1.1 = $156.6
2022-11-22 10:55:44,740 DEBUG on stmt: jump 132
2022-11-22 10:55:44,740 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,740 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,740 DEBUG on stmt: jump 176
2022-11-22 10:55:44,741 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,741 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,741 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,741 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,741 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,741 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,741 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,741 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,741 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,741 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,741 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,741 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,741 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe545968e10>
2022-11-22 10:55:44,741 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,741 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,741 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fe545968ba8>],
             148: [<numba.core.ir.Assign object at 0x7fe54594a7f0>]})
2022-11-22 10:55:44,741 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,741 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,741 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,741 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,741 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,741 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,741 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,741 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,741 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,742 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,742 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,742 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,742 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,742 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,742 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,742 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,742 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,742 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,742 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,742 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,742 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,742 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,742 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,742 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,742 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,742 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,742 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,742 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,742 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,742 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,742 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,742 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,742 DEBUG on stmt: jump 106
2022-11-22 10:55:44,742 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,742 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,742 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,742 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,742 DEBUG on stmt: jump 106
2022-11-22 10:55:44,742 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,742 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,743 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,743 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,743 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,743 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,743 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,743 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,743 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,743 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,743 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,743 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,743 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,743 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,743 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,743 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,743 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,743 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,743 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,743 DEBUG on stmt: jump 132
2022-11-22 10:55:44,743 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,743 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,743 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,743 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,743 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,743 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,743 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,743 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,744 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,744 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,744 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,744 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,744 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,744 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,744 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,744 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,744 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,744 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,744 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,744 DEBUG find_def var='r' stmt=$148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,744 DEBUG find_def_from_top label 148
2022-11-22 10:55:44,744 DEBUG idom 140 from label 148
2022-11-22 10:55:44,744 DEBUG find_def_from_bottom label 140
2022-11-22 10:55:44,744 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,744 DEBUG idom 132 from label 140
2022-11-22 10:55:44,744 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,744 DEBUG find_def_from_top label 132
2022-11-22 10:55:44,744 DEBUG insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 132
2022-11-22 10:55:44,744 DEBUG find_def_from_bottom label 130
2022-11-22 10:55:44,744 DEBUG find_def_from_top label 130
2022-11-22 10:55:44,744 DEBUG idom 106 from label 130
2022-11-22 10:55:44,744 DEBUG find_def_from_bottom label 106
2022-11-22 10:55:44,744 DEBUG find_def_from_top label 106
2022-11-22 10:55:44,744 DEBUG idom 0 from label 106
2022-11-22 10:55:44,744 DEBUG find_def_from_bottom label 0
2022-11-22 10:55:44,745 DEBUG incoming_def r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,745 DEBUG find_def_from_bottom label 156
2022-11-22 10:55:44,745 DEBUG find_def_from_top label 156
2022-11-22 10:55:44,745 DEBUG insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 156
2022-11-22 10:55:44,745 DEBUG find_def_from_bottom label 148
2022-11-22 10:55:44,745 DEBUG incoming_def r.1 = $148.3
2022-11-22 10:55:44,745 DEBUG find_def_from_bottom label 140
2022-11-22 10:55:44,745 DEBUG find_def_from_top label 140
2022-11-22 10:55:44,745 DEBUG idom 132 from label 140
2022-11-22 10:55:44,745 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,745 DEBUG incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:217)], incoming_blocks=[130])
2022-11-22 10:55:44,745 DEBUG incoming_def r.3 = phi(incoming_values=[Var(r.1, numbers.py:240), Var(r.2, numbers.py:240)], incoming_blocks=[148, 140])
2022-11-22 10:55:44,745 DEBUG replaced with: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,745 DEBUG on stmt: r.1 = $148.3
2022-11-22 10:55:44,745 DEBUG on stmt: jump 156
2022-11-22 10:55:44,745 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,745 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,745 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,745 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,745 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,745 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,745 DEBUG on stmt: a.1.1 = $156.6
2022-11-22 10:55:44,745 DEBUG on stmt: jump 132
2022-11-22 10:55:44,745 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,745 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,745 DEBUG on stmt: jump 176
2022-11-22 10:55:44,745 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,745 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,745 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,745 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,746 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,746 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,746 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,746 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,746 DEBUG on stmt: $180.3 = $const180.1 / r
2022-11-22 10:55:44,746 DEBUG find_def var='r' stmt=$180.3 = $const180.1 / r
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 180
2022-11-22 10:55:44,746 DEBUG idom 176 from label 180
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 176
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 176
2022-11-22 10:55:44,746 DEBUG idom 174 from label 176
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 174
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 174
2022-11-22 10:55:44,746 DEBUG idom 132 from label 174
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,746 DEBUG replaced with: $180.3 = $const180.1 / r.2
2022-11-22 10:55:44,746 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,746 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,746 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,746 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe5459400f0>
2022-11-22 10:55:44,746 DEBUG on stmt: $188.2 = cast(value=r)
2022-11-22 10:55:44,746 DEBUG find_def var='r' stmt=$188.2 = cast(value=r)
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 188
2022-11-22 10:55:44,746 DEBUG idom 176 from label 188
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 176
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 176
2022-11-22 10:55:44,746 DEBUG idom 174 from label 176
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 174
2022-11-22 10:55:44,746 DEBUG find_def_from_top label 174
2022-11-22 10:55:44,746 DEBUG idom 132 from label 174
2022-11-22 10:55:44,746 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,746 DEBUG replaced with: $188.2 = cast(value=r.2)
2022-11-22 10:55:44,746 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,747 DEBUG Fix SSA violator on var invert
2022-11-22 10:55:44,747 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,747 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,747 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,747 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,747 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,747 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,747 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,747 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,747 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,747 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,747 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,747 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,747 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,747 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,747 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,747 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,747 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,747 DEBUG first assign: invert
2022-11-22 10:55:44,747 DEBUG replaced with: invert = const(bool, True)
2022-11-22 10:55:44,747 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,747 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,747 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,747 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,747 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,747 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,747 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,747 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,747 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,747 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,747 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,748 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,748 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,748 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,748 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,748 DEBUG on stmt: jump 106
2022-11-22 10:55:44,748 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,748 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,748 DEBUG on stmt: invert = const(bool, False)
2022-11-22 10:55:44,748 DEBUG replaced with: invert.1 = const(bool, False)
2022-11-22 10:55:44,748 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,748 DEBUG on stmt: jump 106
2022-11-22 10:55:44,748 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,748 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,748 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,748 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,748 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,748 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,748 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,748 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,748 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,748 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,748 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,748 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,748 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,748 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,748 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,748 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,748 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,748 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,748 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,748 DEBUG on stmt: jump 132
2022-11-22 10:55:44,748 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,749 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,749 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,749 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,749 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,749 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,749 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,749 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,749 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,749 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,749 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,749 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,749 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,749 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,749 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,749 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,749 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,749 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,749 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,749 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,749 DEBUG on stmt: r.1 = $148.3
2022-11-22 10:55:44,749 DEBUG on stmt: jump 156
2022-11-22 10:55:44,749 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,749 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,749 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:240), Var(r.2, numbers.py:240)], incoming_blocks=[148, 140])
2022-11-22 10:55:44,749 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,749 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,749 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,749 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,749 DEBUG on stmt: a.1.1 = $156.6
2022-11-22 10:55:44,749 DEBUG on stmt: jump 132
2022-11-22 10:55:44,749 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,750 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,750 DEBUG on stmt: jump 176
2022-11-22 10:55:44,750 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,750 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,750 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,750 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,750 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,750 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,750 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,750 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,750 DEBUG on stmt: $180.3 = $const180.1 / r.2
2022-11-22 10:55:44,750 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,750 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,750 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,750 DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x7fe54594aa90>
2022-11-22 10:55:44,750 DEBUG on stmt: $188.2 = cast(value=r.2)
2022-11-22 10:55:44,750 DEBUG on stmt: return $188.2
2022-11-22 10:55:44,750 DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7fe5459689e8>],
             98: [<numba.core.ir.Assign object at 0x7fe545940358>]})
2022-11-22 10:55:44,750 DEBUG ==== SSA block rewrite pass on 0
2022-11-22 10:55:44,750 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,750 DEBUG on stmt: a = arg(0, name=a)
2022-11-22 10:55:44,750 DEBUG on stmt: b = arg(1, name=b)
2022-11-22 10:55:44,750 DEBUG on stmt: $0.1 = freevar(tp: float64)
2022-11-22 10:55:44,750 DEBUG on stmt: $const0.2 = const(int, 1)
2022-11-22 10:55:44,750 DEBUG on stmt: r = call $0.1($const0.2, func=$0.1, args=[Var($const0.2, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,750 DEBUG on stmt: $0.4 = freevar(tp: float64)
2022-11-22 10:55:44,751 DEBUG on stmt: a.1 = call $0.4(a, func=$0.4, args=[Var(a, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,751 DEBUG on stmt: $const0.8 = const(int, 0)
2022-11-22 10:55:44,751 DEBUG on stmt: $0.9 = b < $const0.8
2022-11-22 10:55:44,751 DEBUG on stmt: bool24 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,751 DEBUG on stmt: $24pred = call bool24($0.9, func=bool24, args=(Var($0.9, numbers.py:219),), kws=(), vararg=None)
2022-11-22 10:55:44,751 DEBUG on stmt: branch $24pred, 26, 98
2022-11-22 10:55:44,751 DEBUG ==== SSA block rewrite pass on 26
2022-11-22 10:55:44,751 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,751 DEBUG on stmt: invert = const(bool, True)
2022-11-22 10:55:44,751 DEBUG on stmt: exp = unary(fn=<built-in function neg>, value=b)
2022-11-22 10:55:44,751 DEBUG on stmt: $const26.5 = const(int, 0)
2022-11-22 10:55:44,751 DEBUG on stmt: $26.6 = exp < $const26.5
2022-11-22 10:55:44,751 DEBUG on stmt: bool42 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,751 DEBUG on stmt: $42pred = call bool42($26.6, func=bool42, args=(Var($26.6, numbers.py:222),), kws=(), vararg=None)
2022-11-22 10:55:44,751 DEBUG on stmt: branch $42pred, 44, 48
2022-11-22 10:55:44,751 DEBUG ==== SSA block rewrite pass on 44
2022-11-22 10:55:44,751 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,751 DEBUG on stmt: $44.1 = global(OverflowError: <class 'OverflowError'>)
2022-11-22 10:55:44,751 DEBUG on stmt: <static> raise <class 'OverflowError'>
2022-11-22 10:55:44,751 DEBUG ==== SSA block rewrite pass on 48
2022-11-22 10:55:44,751 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,751 DEBUG on stmt: $48.1 = freevar(is_integer: False)
2022-11-22 10:55:44,751 DEBUG on stmt: bool50 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,751 DEBUG on stmt: $50pred = call bool50($48.1, func=bool50, args=(Var($48.1, numbers.py:224),), kws=(), vararg=None)
2022-11-22 10:55:44,751 DEBUG on stmt: jump 106
2022-11-22 10:55:44,751 DEBUG ==== SSA block rewrite pass on 98
2022-11-22 10:55:44,751 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,751 DEBUG on stmt: invert.1 = const(bool, False)
2022-11-22 10:55:44,751 DEBUG on stmt: exp.1 = b
2022-11-22 10:55:44,751 DEBUG on stmt: jump 106
2022-11-22 10:55:44,752 DEBUG ==== SSA block rewrite pass on 106
2022-11-22 10:55:44,752 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,752 DEBUG on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:221), Var(exp.1, numbers.py:234)], incoming_blocks=[48, 98])
2022-11-22 10:55:44,752 DEBUG on stmt: $const106.2 = const(int, 65536)
2022-11-22 10:55:44,752 DEBUG on stmt: $106.3 = exp.3 > $const106.2
2022-11-22 10:55:44,752 DEBUG on stmt: bool112 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,752 DEBUG on stmt: $112pred = call bool112($106.3, func=bool112, args=(Var($106.3, numbers.py:235),), kws=(), vararg=None)
2022-11-22 10:55:44,752 DEBUG on stmt: branch $112pred, 114, 130
2022-11-22 10:55:44,752 DEBUG ==== SSA block rewrite pass on 114
2022-11-22 10:55:44,752 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,752 DEBUG on stmt: $114.1 = global(math: <module 'math' from '/Users/wdiepeveen/anaconda3/envs/aspire_env/lib/python3.6/lib-dynload/math.cpython-36m-darwin.so'>)
2022-11-22 10:55:44,752 DEBUG on stmt: $114.2 = getattr(value=$114.1, attr=pow)
2022-11-22 10:55:44,752 DEBUG on stmt: $114.4 = global(float: <class 'float'>)
2022-11-22 10:55:44,752 DEBUG on stmt: $114.6 = call $114.4(b, func=$114.4, args=[Var(b, numbers.py:217)], kws=(), vararg=None)
2022-11-22 10:55:44,752 DEBUG on stmt: $114.7 = call $114.2(a.1, $114.6, func=$114.2, args=[Var(a.1, numbers.py:218), Var($114.6, numbers.py:237)], kws=(), vararg=None)
2022-11-22 10:55:44,752 DEBUG on stmt: $114.8 = cast(value=$114.7)
2022-11-22 10:55:44,752 DEBUG on stmt: return $114.8
2022-11-22 10:55:44,752 DEBUG ==== SSA block rewrite pass on 130
2022-11-22 10:55:44,752 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,752 DEBUG on stmt: jump 132
2022-11-22 10:55:44,752 DEBUG ==== SSA block rewrite pass on 132
2022-11-22 10:55:44,752 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,752 DEBUG on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:217), Var(r.3, numbers.py:240)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,752 DEBUG on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:218), Var(a.1.1, numbers.py:242)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,752 DEBUG on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:235), Var(exp.2, numbers.py:241)], incoming_blocks=[130, 156])
2022-11-22 10:55:44,752 DEBUG on stmt: $const132.2 = const(int, 0)
2022-11-22 10:55:44,752 DEBUG on stmt: $132.3 = exp.4 != $const132.2
2022-11-22 10:55:44,752 DEBUG on stmt: bool138 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,752 DEBUG on stmt: $138pred = call bool138($132.3, func=bool138, args=(Var($132.3, numbers.py:238),), kws=(), vararg=None)
2022-11-22 10:55:44,753 DEBUG on stmt: branch $138pred, 140, 174
2022-11-22 10:55:44,753 DEBUG ==== SSA block rewrite pass on 140
2022-11-22 10:55:44,753 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,753 DEBUG on stmt: $const140.2 = const(int, 1)
2022-11-22 10:55:44,753 DEBUG on stmt: $140.3 = exp.4 & $const140.2
2022-11-22 10:55:44,753 DEBUG on stmt: bool146 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,753 DEBUG on stmt: $146pred = call bool146($140.3, func=bool146, args=(Var($140.3, numbers.py:239),), kws=(), vararg=None)
2022-11-22 10:55:44,753 DEBUG on stmt: branch $146pred, 148, 156
2022-11-22 10:55:44,753 DEBUG ==== SSA block rewrite pass on 148
2022-11-22 10:55:44,753 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,753 DEBUG on stmt: $148.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,753 DEBUG on stmt: r.1 = $148.3
2022-11-22 10:55:44,753 DEBUG on stmt: jump 156
2022-11-22 10:55:44,753 DEBUG ==== SSA block rewrite pass on 156
2022-11-22 10:55:44,753 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,753 DEBUG on stmt: r.3 = phi(incoming_values=[Var(r.1, numbers.py:240), Var(r.2, numbers.py:240)], incoming_blocks=[148, 140])
2022-11-22 10:55:44,753 DEBUG on stmt: $const156.2 = const(int, 1)
2022-11-22 10:55:44,753 DEBUG on stmt: $156.3 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,753 DEBUG on stmt: exp.2 = $156.3
2022-11-22 10:55:44,753 DEBUG on stmt: $156.6 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2022-11-22 10:55:44,753 DEBUG on stmt: a.1.1 = $156.6
2022-11-22 10:55:44,753 DEBUG on stmt: jump 132
2022-11-22 10:55:44,753 DEBUG ==== SSA block rewrite pass on 174
2022-11-22 10:55:44,753 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,753 DEBUG on stmt: jump 176
2022-11-22 10:55:44,753 DEBUG ==== SSA block rewrite pass on 176
2022-11-22 10:55:44,754 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,754 DEBUG on stmt: bool178 = global(bool: <class 'bool'>)
2022-11-22 10:55:44,754 DEBUG on stmt: $178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,754 DEBUG find_def var='invert' stmt=$178pred = call bool178(invert, func=bool178, args=(Var(invert, numbers.py:220),), kws=(), vararg=None)
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 176
2022-11-22 10:55:44,754 DEBUG idom 174 from label 176
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 174
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 174
2022-11-22 10:55:44,754 DEBUG idom 132 from label 174
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 132
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 132
2022-11-22 10:55:44,754 DEBUG idom 130 from label 132
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 130
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 130
2022-11-22 10:55:44,754 DEBUG idom 106 from label 130
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 106
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 106
2022-11-22 10:55:44,754 DEBUG insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 48
2022-11-22 10:55:44,754 DEBUG find_def_from_top label 48
2022-11-22 10:55:44,754 DEBUG idom 26 from label 48
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 26
2022-11-22 10:55:44,754 DEBUG incoming_def invert = const(bool, True)
2022-11-22 10:55:44,754 DEBUG find_def_from_bottom label 98
2022-11-22 10:55:44,754 DEBUG incoming_def invert.1 = const(bool, False)
2022-11-22 10:55:44,754 DEBUG replaced with: $178pred = call bool178(invert.2, func=bool178, args=(Var(invert.2, numbers.py:244),), kws=(), vararg=None)
2022-11-22 10:55:44,754 DEBUG on stmt: branch $178pred, 180, 188
2022-11-22 10:55:44,754 DEBUG ==== SSA block rewrite pass on 180
2022-11-22 10:55:44,754 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,754 DEBUG on stmt: $const180.1 = const(float, 1.0)
2022-11-22 10:55:44,754 DEBUG on stmt: $180.3 = $const180.1 / r.2
2022-11-22 10:55:44,754 DEBUG on stmt: $180.4 = cast(value=$180.3)
2022-11-22 10:55:44,755 DEBUG on stmt: return $180.4
2022-11-22 10:55:44,755 DEBUG ==== SSA block rewrite pass on 188
2022-11-22 10:55:44,755 DEBUG Running <numba.core.ssa._FixSSAVars object at 0x7fe545940f28>
2022-11-22 10:55:44,755 DEBUG on stmt: $188.2 = cast(value=r.2)
2022-11-22 10:55:44,755 DEBUG on stmt: return $188.2
2022-11-22 11:01:54,390 DEBUG label 0:
    self = arg(0, name=self)                 ['self']
    $0.2 = getattr(value=self, attr=reshape) ['$0.2', 'self']
    $const_-1 = const(int, -1)               ['$const_-1']
    $const_4 = const(int, 4)                 ['$const_4']
    $const0.3 = build_tuple(items=[Var($const_-1, properties.py:142), Var($const_4, properties.py:142)]) ['$const0.3', '$const_-1', '$const_4']
    s = call $0.2($const0.3, func=$0.2, args=[Var($const0.3, properties.py:142)], kws=(), vararg=None) ['$0.2', '$const0.3', 's']
    $0.5 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>) ['$0.5']
    $0.6 = getattr(value=$0.5, attr=empty)   ['$0.5', '$0.6']
    $0.8 = getattr(value=s, attr=shape)      ['$0.8', 's']
    $const0.9 = const(int, 0)                ['$const0.9']
    $0.10 = getitem(value=$0.8, index=$const0.9, fn=<built-in function getitem>) ['$0.10', '$0.8', '$const0.9']
    $0.12 = getattr(value=self, attr=dtype)  ['$0.12', 'self']
    n = call $0.6($0.10, func=$0.6, args=[Var($0.10, properties.py:143)], kws=[('dtype', Var($0.12, properties.py:143))], vararg=None) ['$0.10', '$0.12', '$0.6', 'n']
    jump 34                                  []
label 34:
    jump 36                                  []
label 36:
    $36.1 = global(range: <class 'range'>)   ['$36.1']
    $36.3 = getattr(value=s, attr=shape)     ['$36.3', 's']
    $const36.4 = const(int, 0)               ['$const36.4']
    $36.5 = getitem(value=$36.3, index=$const36.4, fn=<built-in function getitem>) ['$36.3', '$36.5', '$const36.4']
    $36.6 = call $36.1($36.5, func=$36.1, args=[Var($36.5, properties.py:144)], kws=(), vararg=None) ['$36.1', '$36.5', '$36.6']
    $36.7 = getiter(value=$36.6)             ['$36.6', '$36.7']
    $phi50.1 = $36.7                         ['$36.7', '$phi50.1']
    jump 50                                  []
label 50:
    $50.2 = iternext(value=$phi50.1)         ['$50.2', '$phi50.1']
    $50.3 = pair_first(value=$50.2)          ['$50.2', '$50.3']
    $50.4 = pair_second(value=$50.2)         ['$50.2', '$50.4']
    $phi52.1 = $50.3                         ['$50.3', '$phi52.1']
    $phi130.1 = $50.3                        ['$50.3', '$phi130.1']
    $phi130.2 = $phi50.1                     ['$phi130.2', '$phi50.1']
    branch $50.4, 52, 130                    ['$50.4']
label 52:
    i = $phi52.1                             ['$phi52.1', 'i']
    $52.2 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>) ['$52.2']
    $52.3 = getattr(value=$52.2, attr=sqrt)  ['$52.2', '$52.3']
    $const52.6 = const(int, 0)               ['$const52.6']
    $52.7 = build_tuple(items=[Var(i, properties.py:144), Var($const52.6, properties.py:145)]) ['$52.7', '$const52.6', 'i']
    $52.8 = getitem(value=s, index=$52.7, fn=<built-in function getitem>) ['$52.7', '$52.8', 's']
    $const52.9 = const(int, 2)               ['$const52.9']
    $52.10 = $52.8 ** $const52.9             ['$52.10', '$52.8', '$const52.9']
    $const52.13 = const(int, 1)              ['$const52.13']
    $52.14 = build_tuple(items=[Var(i, properties.py:144), Var($const52.13, properties.py:145)]) ['$52.14', '$const52.13', 'i']
    $52.15 = getitem(value=s, index=$52.14, fn=<built-in function getitem>) ['$52.14', '$52.15', 's']
    $const52.16 = const(int, 2)              ['$const52.16']
    $52.17 = $52.15 ** $const52.16           ['$52.15', '$52.17', '$const52.16']
    $52.18 = $52.10 + $52.17                 ['$52.10', '$52.17', '$52.18']
    $const52.21 = const(int, 2)              ['$const52.21']
    $52.22 = build_tuple(items=[Var(i, properties.py:144), Var($const52.21, properties.py:145)]) ['$52.22', '$const52.21', 'i']
    $52.23 = getitem(value=s, index=$52.22, fn=<built-in function getitem>) ['$52.22', '$52.23', 's']
    $const52.24 = const(int, 2)              ['$const52.24']
    $52.25 = $52.23 ** $const52.24           ['$52.23', '$52.25', '$const52.24']
    $52.26 = $52.18 + $52.25                 ['$52.18', '$52.25', '$52.26']
    $const52.29 = const(int, 3)              ['$const52.29']
    $52.30 = build_tuple(items=[Var(i, properties.py:144), Var($const52.29, properties.py:145)]) ['$52.30', '$const52.29', 'i']
    $52.31 = getitem(value=s, index=$52.30, fn=<built-in function getitem>) ['$52.30', '$52.31', 's']
    $const52.32 = const(int, 2)              ['$const52.32']
    $52.33 = $52.31 ** $const52.32           ['$52.31', '$52.33', '$const52.32']
    $52.34 = $52.26 + $52.33                 ['$52.26', '$52.33', '$52.34']
    $52.35 = call $52.3($52.34, func=$52.3, args=[Var($52.34, properties.py:145)], kws=(), vararg=None) ['$52.3', '$52.34', '$52.35']
    n[i] = $52.35                            ['$52.35', 'i', 'n']
    jump 50                                  []
label 130:
    jump 132                                 []
label 132:
    $132.2 = getattr(value=n, attr=reshape)  ['$132.2', 'n']
    $132.4 = getattr(value=self, attr=shape) ['$132.4', 'self']
    $const132.5 = const(NoneType, None)      ['$const132.5']
    $const132.6 = const(int, -1)             ['$const132.6']
    $132.7 = global(slice: <class 'slice'>)  ['$132.7']
    $132.8 = call $132.7($const132.5, $const132.6, func=$132.7, args=(Var($const132.5, properties.py:146), Var($const132.6, properties.py:146)), kws=(), vararg=None) ['$132.7', '$132.8', '$const132.5', '$const132.6']
    $132.9 = getitem(value=$132.4, index=$132.8, fn=<built-in function getitem>) ['$132.4', '$132.8', '$132.9']
    $132.10 = call $132.2($132.9, func=$132.2, args=[Var($132.9, properties.py:146)], kws=(), vararg=None) ['$132.10', '$132.2', '$132.9']
    $132.11 = cast(value=$132.10)            ['$132.10', '$132.11']
    return $132.11                           ['$132.11']

2022-11-22 11:01:54,403 DEBUG ==== SSA block analysis pass on 0
2022-11-22 11:01:54,403 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,403 DEBUG on stmt: self = arg(0, name=self)
2022-11-22 11:01:54,404 DEBUG on stmt: $0.2 = getattr(value=self, attr=reshape)
2022-11-22 11:01:54,404 DEBUG on stmt: $const_-1 = const(int, -1)
2022-11-22 11:01:54,404 DEBUG on stmt: $const_4 = const(int, 4)
2022-11-22 11:01:54,404 DEBUG on stmt: $const0.3 = build_tuple(items=[Var($const_-1, properties.py:142), Var($const_4, properties.py:142)])
2022-11-22 11:01:54,404 DEBUG on stmt: s = call $0.2($const0.3, func=$0.2, args=[Var($const0.3, properties.py:142)], kws=(), vararg=None)
2022-11-22 11:01:54,404 DEBUG on stmt: $0.5 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>)
2022-11-22 11:01:54,404 DEBUG on stmt: $0.6 = getattr(value=$0.5, attr=empty)
2022-11-22 11:01:54,404 DEBUG on stmt: $0.8 = getattr(value=s, attr=shape)
2022-11-22 11:01:54,405 DEBUG on stmt: $const0.9 = const(int, 0)
2022-11-22 11:01:54,405 DEBUG on stmt: $0.10 = static_getitem(value=$0.8, index=0, index_var=$const0.9, fn=<built-in function getitem>)
2022-11-22 11:01:54,405 DEBUG on stmt: $0.12 = getattr(value=self, attr=dtype)
2022-11-22 11:01:54,405 DEBUG on stmt: n = call $0.6($0.10, func=$0.6, args=[Var($0.10, properties.py:143)], kws=[('dtype', Var($0.12, properties.py:143))], vararg=None)
2022-11-22 11:01:54,405 DEBUG on stmt: jump 34
2022-11-22 11:01:54,405 DEBUG ==== SSA block analysis pass on 34
2022-11-22 11:01:54,405 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,405 DEBUG on stmt: jump 36
2022-11-22 11:01:54,405 DEBUG ==== SSA block analysis pass on 36
2022-11-22 11:01:54,405 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,405 DEBUG on stmt: $36.1 = global(range: <class 'range'>)
2022-11-22 11:01:54,405 DEBUG on stmt: $36.3 = getattr(value=s, attr=shape)
2022-11-22 11:01:54,405 DEBUG on stmt: $const36.4 = const(int, 0)
2022-11-22 11:01:54,405 DEBUG on stmt: $36.5 = static_getitem(value=$36.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
2022-11-22 11:01:54,405 DEBUG on stmt: $36.6 = call $36.1($36.5, func=$36.1, args=[Var($36.5, properties.py:144)], kws=(), vararg=None)
2022-11-22 11:01:54,405 DEBUG on stmt: $36.7 = getiter(value=$36.6)
2022-11-22 11:01:54,405 DEBUG on stmt: $phi50.1 = $36.7
2022-11-22 11:01:54,405 DEBUG on stmt: jump 50
2022-11-22 11:01:54,405 DEBUG ==== SSA block analysis pass on 50
2022-11-22 11:01:54,405 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,406 DEBUG on stmt: $50.2 = iternext(value=$phi50.1)
2022-11-22 11:01:54,406 DEBUG on stmt: $50.3 = pair_first(value=$50.2)
2022-11-22 11:01:54,406 DEBUG on stmt: $50.4 = pair_second(value=$50.2)
2022-11-22 11:01:54,406 DEBUG on stmt: $phi52.1 = $50.3
2022-11-22 11:01:54,406 DEBUG on stmt: $phi130.1 = $50.3
2022-11-22 11:01:54,407 DEBUG on stmt: $phi130.2 = $phi50.1
2022-11-22 11:01:54,407 DEBUG on stmt: branch $50.4, 52, 130
2022-11-22 11:01:54,407 DEBUG ==== SSA block analysis pass on 52
2022-11-22 11:01:54,407 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,407 DEBUG on stmt: i = $phi52.1
2022-11-22 11:01:54,407 DEBUG on stmt: $52.2 = global(np: <module 'numpy' from '/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/numpy/__init__.py'>)
2022-11-22 11:01:54,407 DEBUG on stmt: $52.3 = getattr(value=$52.2, attr=sqrt)
2022-11-22 11:01:54,407 DEBUG on stmt: $const52.6 = const(int, 0)
2022-11-22 11:01:54,407 DEBUG on stmt: $52.7 = build_tuple(items=[Var(i, properties.py:144), Var($const52.6, properties.py:145)])
2022-11-22 11:01:54,407 DEBUG on stmt: $52.8 = getitem(value=s, index=$52.7, fn=<built-in function getitem>)
2022-11-22 11:01:54,407 DEBUG on stmt: $const52.9 = const(int, 2)
2022-11-22 11:01:54,407 DEBUG on stmt: $52.10 = $52.8 ** $const52.9
2022-11-22 11:01:54,407 DEBUG on stmt: $const52.13 = const(int, 1)
2022-11-22 11:01:54,408 DEBUG on stmt: $52.14 = build_tuple(items=[Var(i, properties.py:144), Var($const52.13, properties.py:145)])
2022-11-22 11:01:54,408 DEBUG on stmt: $52.15 = getitem(value=s, index=$52.14, fn=<built-in function getitem>)
2022-11-22 11:01:54,408 DEBUG on stmt: $const52.16 = const(int, 2)
2022-11-22 11:01:54,408 DEBUG on stmt: $52.17 = $52.15 ** $const52.16
2022-11-22 11:01:54,408 DEBUG on stmt: $52.18 = $52.10 + $52.17
2022-11-22 11:01:54,408 DEBUG on stmt: $const52.21 = const(int, 2)
2022-11-22 11:01:54,408 DEBUG on stmt: $52.22 = build_tuple(items=[Var(i, properties.py:144), Var($const52.21, properties.py:145)])
2022-11-22 11:01:54,408 DEBUG on stmt: $52.23 = getitem(value=s, index=$52.22, fn=<built-in function getitem>)
2022-11-22 11:01:54,408 DEBUG on stmt: $const52.24 = const(int, 2)
2022-11-22 11:01:54,408 DEBUG on stmt: $52.25 = $52.23 ** $const52.24
2022-11-22 11:01:54,408 DEBUG on stmt: $52.26 = $52.18 + $52.25
2022-11-22 11:01:54,409 DEBUG on stmt: $const52.29 = const(int, 3)
2022-11-22 11:01:54,409 DEBUG on stmt: $52.30 = build_tuple(items=[Var(i, properties.py:144), Var($const52.29, properties.py:145)])
2022-11-22 11:01:54,409 DEBUG on stmt: $52.31 = getitem(value=s, index=$52.30, fn=<built-in function getitem>)
2022-11-22 11:01:54,409 DEBUG on stmt: $const52.32 = const(int, 2)
2022-11-22 11:01:54,409 DEBUG on stmt: $52.33 = $52.31 ** $const52.32
2022-11-22 11:01:54,409 DEBUG on stmt: $52.34 = $52.26 + $52.33
2022-11-22 11:01:54,409 DEBUG on stmt: $52.35 = call $52.3($52.34, func=$52.3, args=[Var($52.34, properties.py:145)], kws=(), vararg=None)
2022-11-22 11:01:54,409 DEBUG on stmt: n[i] = $52.35
2022-11-22 11:01:54,409 DEBUG on stmt: jump 50
2022-11-22 11:01:54,409 DEBUG ==== SSA block analysis pass on 130
2022-11-22 11:01:54,409 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,409 DEBUG on stmt: jump 132
2022-11-22 11:01:54,409 DEBUG ==== SSA block analysis pass on 132
2022-11-22 11:01:54,409 DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x7fe545b542e8>
2022-11-22 11:01:54,409 DEBUG on stmt: $132.2 = getattr(value=n, attr=reshape)
2022-11-22 11:01:54,409 DEBUG on stmt: $132.4 = getattr(value=self, attr=shape)
2022-11-22 11:01:54,409 DEBUG on stmt: $const132.5 = const(NoneType, None)
2022-11-22 11:01:54,410 DEBUG on stmt: $const132.6 = const(int, -1)
2022-11-22 11:01:54,410 DEBUG on stmt: $132.7 = global(slice: <class 'slice'>)
2022-11-22 11:01:54,410 DEBUG on stmt: $132.8 = call $132.7($const132.5, $const132.6, func=$132.7, args=(Var($const132.5, properties.py:146), Var($const132.6, properties.py:146)), kws=(), vararg=None)
2022-11-22 11:01:54,410 DEBUG on stmt: $132.9 = static_getitem(value=$132.4, index=slice(None, -1, None), index_var=$132.8, fn=<built-in function getitem>)
2022-11-22 11:01:54,410 DEBUG on stmt: $132.10 = call $132.2($132.9, func=$132.2, args=[Var($132.9, properties.py:146)], kws=(), vararg=None)
2022-11-22 11:01:54,410 DEBUG on stmt: $132.11 = cast(value=$132.10)
2022-11-22 11:01:54,410 DEBUG on stmt: return $132.11
2022-11-22 11:01:54,411 DEBUG defs defaultdict(<class 'list'>,
            {'$0.10': [<numba.core.ir.Assign object at 0x7fe545b86ef0>],
             '$0.12': [<numba.core.ir.Assign object at 0x7fe545b86b38>],
             '$0.2': [<numba.core.ir.Assign object at 0x7fe545b860f0>],
             '$0.5': [<numba.core.ir.Assign object at 0x7fe545b86588>],
             '$0.6': [<numba.core.ir.Assign object at 0x7fe545b86668>],
             '$0.8': [<numba.core.ir.Assign object at 0x7fe545b867f0>],
             '$132.10': [<numba.core.ir.Assign object at 0x7fe545aace10>],
             '$132.11': [<numba.core.ir.Assign object at 0x7fe545aaca90>],
             '$132.2': [<numba.core.ir.Assign object at 0x7fe545b4b470>],
             '$132.4': [<numba.core.ir.Assign object at 0x7fe545b4b2e8>],
             '$132.7': [<numba.core.ir.Assign object at 0x7fe545aac908>],
             '$132.8': [<numba.core.ir.Assign object at 0x7fe545aaceb8>],
             '$132.9': [<numba.core.ir.Assign object at 0x7fe545b86c50>],
             '$36.1': [<numba.core.ir.Assign object at 0x7fe545b67048>],
             '$36.3': [<numba.core.ir.Assign object at 0x7fe545b548d0>],
             '$36.5': [<numba.core.ir.Assign object at 0x7fe545b86e10>],
             '$36.6': [<numba.core.ir.Assign object at 0x7fe545b54eb8>],
             '$36.7': [<numba.core.ir.Assign object at 0x7fe545b54b00>],
             '$50.2': [<numba.core.ir.Assign object at 0x7fe545b54978>],
             '$50.3': [<numba.core.ir.Assign object at 0x7fe545b54908>],
             '$50.4': [<numba.core.ir.Assign object at 0x7fe545b54828>],
             '$52.10': [<numba.core.ir.Assign object at 0x7fe545b65e80>],
             '$52.14': [<numba.core.ir.Assign object at 0x7fe545b65cf8>],
             '$52.15': [<numba.core.ir.Assign object at 0x7fe545b65c18>],
             '$52.17': [<numba.core.ir.Assign object at 0x7fe545b65978>],
             '$52.18': [<numba.core.ir.Assign object at 0x7fe545b65828>],
             '$52.2': [<numba.core.ir.Assign object at 0x7fe545b549e8>],
             '$52.22': [<numba.core.ir.Assign object at 0x7fe545b654e0>],
             '$52.23': [<numba.core.ir.Assign object at 0x7fe545b655c0>],
             '$52.25': [<numba.core.ir.Assign object at 0x7fe545b4bc18>],
             '$52.26': [<numba.core.ir.Assign object at 0x7fe545b4bf28>],
             '$52.3': [<numba.core.ir.Assign object at 0x7fe545b54048>],
             '$52.30': [<numba.core.ir.Assign object at 0x7fe545b4bc50>],
             '$52.31': [<numba.core.ir.Assign object at 0x7fe545b4bac8>],
             '$52.33': [<numba.core.ir.Assign object at 0x7fe545b4b4a8>],
             '$52.34': [<numba.core.ir.Assign object at 0x7fe545b4b7b8>],
             '$52.35': [<numba.core.ir.Assign object at 0x7fe545b4b898>],
             '$52.7': [<numba.core.ir.Assign object at 0x7fe545b65160>],
             '$52.8': [<numba.core.ir.Assign object at 0x7fe545b651d0>],
             '$const0.3': [<numba.core.ir.Assign object at 0x7fe545b86320>],
             '$const0.9': [<numba.core.ir.Assign object at 0x7fe545b868d0>],
             '$const132.5': [<numba.core.ir.Assign object at 0x7fe545b4b278>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fe545b4b198>],
             '$const36.4': [<numba.core.ir.Assign object at 0x7fe545b54d68>],
             '$const52.13': [<numba.core.ir.Assign object at 0x7fe545b65da0>],
             '$const52.16': [<numba.core.ir.Assign object at 0x7fe545b65b00>],
             '$const52.21': [<numba.core.ir.Assign object at 0x7fe545b65c50>],
             '$const52.24': [<numba.core.ir.Assign object at 0x7fe545a0ab00>],
             '$const52.29': [<numba.core.ir.Assign object at 0x7fe545b4bcf8>],
             '$const52.32': [<numba.core.ir.Assign object at 0x7fe545b4b668>],
             '$const52.6': [<numba.core.ir.Assign object at 0x7fe545b54710>],
             '$const52.9': [<numba.core.ir.Assign object at 0x7fe545b65f60>],
             '$const_-1': [<numba.core.ir.Assign object at 0x7fe545b86208>],
             '$const_4': [<numba.core.ir.Assign object at 0x7fe545b862b0>],
             '$phi130.1': [<numba.core.ir.Assign object at 0x7fe545b54518>],
             '$phi130.2': [<numba.core.ir.Assign object at 0x7fe545b54400>],
             '$phi50.1': [<numba.core.ir.Assign object at 0x7fe545b547f0>],
             '$phi52.1': [<numba.core.ir.Assign object at 0x7fe545b546a0>],
             'i': [<numba.core.ir.Assign object at 0x7fe545b544a8>],
             'n': [<numba.core.ir.Assign object at 0x7fe545b672e8>],
             's': [<numba.core.ir.Assign object at 0x7fe545b86400>],
             'self': [<numba.core.ir.Assign object at 0x7fe545b67f28>]})
2022-11-22 11:01:54,411 DEBUG SSA violators set()
2022-11-22 11:11:00,500 DEBUG Corresponding type is already real float64.
2022-11-22 11:11:00,501 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:12:37,707 DEBUG Corresponding type is already real float64.
2022-11-22 11:12:37,707 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:12:52,871 DEBUG Corresponding type is already real float64.
2022-11-22 11:12:52,872 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:13:45,810 DEBUG Corresponding type is already real float64.
2022-11-22 11:13:45,810 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:14:09,570 DEBUG Corresponding type is already real float64.
2022-11-22 11:14:09,571 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:14:31,613 DEBUG Corresponding type is already real float64.
2022-11-22 11:14:31,614 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:14:48,531 DEBUG Corresponding type is already real float64.
2022-11-22 11:14:48,531 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:15:58,465 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-11-22 11:15:58,465 DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,466 DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,467 DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'American Typewriter' (AmericanTypewriter.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Kohinoor Gujarati' (KohinoorGujarati.ttc) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'DecoType Naskh' (DecoTypeNaskh.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Verdana' (Verdana Bold Italic.ttf) italic normal 700 normal>) = 4.971363636363637
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Lao MN' (Lao MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Georgia' (Georgia Bold Italic.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Sans Elbasan' (NotoSansElbasan-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Arial' (Arial Bold Italic.ttf) italic normal 700 normal>) = 7.698636363636363
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Apple Braille' (Apple Braille Outline 8 Dot.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'STIXVariants' (STIXVar.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,468 DEBUG findfont: score(<Font 'Noto Sans Miao' (NotoSansMiao-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Bangla MN' (Bangla MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Charter' (Charter.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Oriya MN' (Oriya MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font '.SF NS Rounded' (SFNSRounded.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Lao Sangam MN' (Lao Sangam MN.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Mishafi' (Mishafi.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Gujarati Sangam MN' (Gujarati Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Sinhala Sangam MN' (Sinhala Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font '.SF NS Mono' (SFNSMono.ttf) normal normal 295 normal>) = 10.14975
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Serif Balinese' (NotoSerifBalinese-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Avenir' (Avenir.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Noto Sans Multani' (NotoSansMultani-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet MS.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,469 DEBUG findfont: score(<Font 'Times New Roman' (Times New Roman Italic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Nadeem' (Nadeem.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'PT Serif Caption' (PTSerifCaption.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Mshtakan' (Mshtakan.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W7.ttc) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Noto Sans Khudawadi' (NotoSansKhudawadi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Noto Sans Siddham' (NotoSansSiddham-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Raanana' (Raanana.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W4.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Party LET' (PartyLET-plain.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Noto Sans Pau Cin Hau' (NotoSansPauCinHau-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'PT Sans' (PTSans.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Chalkduster' (Chalkduster.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Geeza Pro' (GeezaPro.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Arial' (Arial Bold.ttf) normal normal 700 normal>) = 6.698636363636363
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,470 DEBUG findfont: score(<Font 'Apple Chancery' (Apple Chancery.ttf) normal normal 0 normal>) = 10.43
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'AppleMyungjo' (AppleMyungjo.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Apple Symbols' (Apple Symbols.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font '.SF NS Mono' (SFNSMonoItalic.ttf) italic normal 295 normal>) = 11.14975
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Noto Sans Caucasian Albanian' (NotoSansCaucasianAlbanian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Trattatello' (Trattatello.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Noteworthy' (Noteworthy.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Kohinoor Bangla' (KohinoorBangla.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Wingdings 2' (Wingdings 2.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'PT Serif' (PTSerif.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Helvetica' (Helvetica.ttc) normal normal 400 normal>) = 7.322727272727273
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Tahoma' (Tahoma.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Brush Script MT' (Brush Script.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Hiragino Sans GB' (Hiragino Sans GB.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Farah' (Farah.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,471 DEBUG findfont: score(<Font 'Kailasa' (Kailasa.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font '.Arabic UI Display' (ArabicUIDisplay.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Devanagari Sangam MN' (Devanagari Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Myanmar MN' (Myanmar MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Damascus' (Damascus.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Krungthep' (Krungthep.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font '.Aqua Kana' (AquaKana.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Al Nile' (Al Nile.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Chalkboard SE' (ChalkboardSE.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Noto Sans Tirhuta' (NotoSansTirhuta-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Georgia' (Georgia Italic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Noto Sans Hanifi Rohingya' (NotoSansHanifiRohingya-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'PingFang HK' (PingFang.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Khmer Sangam MN' (Khmer Sangam MN.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Noto Sans Duployan' (NotoSansDuployan-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Corsiva Hebrew' (Corsiva.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,472 DEBUG findfont: score(<Font 'Kokonor' (Kokonor.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Noto Sans Mro' (NotoSansMro-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Big Caslon' (BigCaslon.ttf) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Tamil Sangam MN' (Tamil Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Bodoni 72' (Bodoni 72.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Noto Sans Hatran' (NotoSansHatran-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,473 DEBUG findfont: score(<Font 'Heiti TC' (STHeiti Light.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Kefa' (Kefa.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W9.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans Newa' (NotoSansNewa-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Zapfino' (Zapfino.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Tamil MN' (Tamil MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans Psalter Pahlavi' (NotoSansPsalterPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Diwan Thuluth' (Diwan Thuluth.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Arial Rounded MT Bold' (Arial Rounded Bold.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'System Font' (SFNSItalic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,474 DEBUG findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Galvji' (Galvji.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold Italic.ttf) italic normal 700 condensed>) = 11.535
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Mende Kikakui' (NotoSansMendeKikakui-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Comic Sans MS' (Comic Sans MS.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Optima' (Optima.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Seravek' (Seravek.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,475 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W3.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Takri' (NotoSansTakri-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Sana' (Sana.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font '.SF Compact Rounded' (SFCompactRounded.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Wingdings' (Wingdings.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Khojki' (NotoSansKhojki-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Al Tarikh' (Al Tarikh.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Arial Unicode MS' (Arial Unicode.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Skia' (Skia.ttf) normal normal 5 normal>) = 10.42525
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Palmyrene' (NotoSansPalmyrene-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Old Hungarian' (NotoSansOldHungarian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Old North Arabian' (NotoSansOldNorthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,476 DEBUG findfont: score(<Font 'Marion' (Marion.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Noto Sans Warang Citi' (NotoSansWarangCiti-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'PT Mono' (PTMono.ttc) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Hiragino Mincho ProN' (ヒラギノ明朝 ProN.ttc) normal normal 300 normal>) = 10.145
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Bodoni 72 Oldstyle' (Bodoni 72 OS.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W8.ttc) normal normal 800 normal>) = 10.43
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Verdana' (Verdana Bold.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Noto Sans Sora Sompeng' (NotoSansSoraSompeng-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Noto Sans Linear A' (NotoSansLinearA-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Times New Roman' (Times New Roman Bold Italic.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Sathu' (Sathu.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Papyrus' (Papyrus.ttc) normal normal 400 condensed>) = 10.25
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'SignPainter' (SignPainter.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,477 DEBUG findfont: score(<Font 'Apple Braille' (Apple Braille Outline 6 Dot.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font '.New York' (NewYorkItalic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Comic Sans MS' (Comic Sans MS Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Arial' (Arial Italic.ttf) italic normal 400 normal>) = 7.413636363636363
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'STIXIntegralsUp' (STIXIntUpReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Euphemia UCAS' (EuphemiaCAS.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Bodoni Ornaments' (Bodoni Ornaments.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Telugu MN' (Telugu MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Bradley Hand' (Bradley Hand Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Courier New' (Courier New Italic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Beirut' (Beirut.ttc) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Arial Black' (Arial Black.ttf) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Avenir Next' (Avenir Next.ttc) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W2.ttc) normal normal 250 normal>) = 10.1925
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'DIN Condensed' (DIN Condensed Bold.ttf) normal normal 700 condensed>) = 10.535
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Luminari' (Luminari.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Ayuthaya' (Ayuthaya.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Silom' (Silom.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,478 DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Italic.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font '.SF Compact' (SFCompact.ttf) normal normal 1000 normal>) = 10.62
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Phosphate' (Phosphate.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font '.New York' (NewYork.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Times New Roman' (Times New Roman Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Tahoma' (Tahoma Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Bangla Sangam MN' (Bangla Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Noto Sans Nabataean' (NotoSansNabataean-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Arial Hebrew' (ArialHB.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'STIXIntegralsUpSm' (STIXIntUpSmBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Herculanum' (Herculanum.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Savoye LET' (Savoye LET.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,479 DEBUG findfont: score(<Font 'Muna' (Muna.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Avenir Next Condensed' (Avenir Next Condensed.ttc) normal normal 700 condensed>) = 10.535
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Arial Narrow' (Arial Narrow.ttf) normal normal 400 condensed>) = 10.25
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Heiti TC' (STHeiti Medium.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W6.ttc) normal normal 600 normal>) = 10.24
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Apple SD Gothic Neo' (AppleSDGothicNeo.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Sinhala MN' (Sinhala MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Microsoft Sans Serif' (Microsoft Sans Serif.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Didot' (Didot.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Kohinoor Devanagari' (Kohinoor.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Diwan Kufi' (Diwan Kufi.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,480 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W1.ttc) normal normal 200 normal>) = 10.24
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Times' (Times.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Hiragino Maru Gothic Pro' (ヒラギノ丸ゴ ProN W4.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Telugu Sangam MN' (Telugu Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Waseem' (Waseem.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Kannada Sangam MN' (Kannada Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W0.ttc) normal normal 100 normal>) = 10.335
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Baghdad' (Baghdad.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Arial Narrow' (Arial Narrow Bold.ttf) normal normal 700 condensed>) = 10.535
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Malayalam MN' (Malayalam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Thonburi' (Thonburi.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Iowan Old Style' (Iowan Old Style.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Wingdings 3' (Wingdings 3.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font '.Arabic UI Text' (ArabicUIText.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'STIXIntegralsSm' (STIXIntSmReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Gurmukhi MN' (Gurmukhi MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,481 DEBUG findfont: score(<Font 'Gurmukhi MT' (Gurmukhi.ttf) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'STIXIntegralsD' (STIXIntDReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Meroitic' (NotoSansMeroitic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Marker Felt' (MarkerFelt.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Academy Engraved LET' (Academy Engraved LET Fonts.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.otf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Arial Narrow' (Arial Narrow Italic.ttf) italic normal 400 condensed>) = 11.25
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'STIXVariants' (STIXVarBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Plantagenet Cherokee' (PlantagenetCherokee.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Mishafi Gold' (Mishafi Gold.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Athelas' (Athelas.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Courier New' (Courier New Bold Italic.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'System Font' (SFNS.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,482 DEBUG findfont: score(<Font 'Chalkboard' (Chalkboard.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Snell Roundhand' (SnellRoundhand.ttc) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Courier New' (Courier New.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'KufiStandardGK' (KufiStandardGK.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Helvetica Neue' (HelveticaNeue.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Hiragino Sans' (ヒラギノ角ゴシック W5.ttc) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 6 Dot.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliq.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'AppleGothic' (AppleGothic.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Bhaiksuki' (NotoSansBhaiksuki-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Serif Ahom' (NotoSerifAhom-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Copperplate' (Copperplate.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Bassa Vah' (NotoSansBassaVah-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Gurmukhi Sangam MN' (Gurmukhi Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Noto Sans Sharada' (NotoSansSharada-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'ITF Devanagari' (ITFDevanagari.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,483 DEBUG findfont: score(<Font 'Bodoni 72 Smallcaps' (Bodoni 72 Smallcaps Book.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Hoefler Text' (Hoefler Text.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Gujarati MT' (GujaratiMT.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font '.Keyboard' (Keyboard.ttf) normal normal 100 normal>) = 10.335
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'STIXIntegralsUpD' (STIXIntUpDReg.otf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Verdana' (Verdana Italic.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Symbol' (Symbol.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Noto Sans Syriac' (NotoSansSyriac-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Georgia' (Georgia Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet MS Bold Italic.ttf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Rockwell' (Rockwell.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Apple Braille' (Apple Braille.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'STIXIntegralsD' (STIXIntDBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Oriya Sangam MN' (Oriya Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.otf) italic normal 400 normal>) = 11.05
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,484 DEBUG findfont: score(<Font 'Malayalam Sangam MN' (Malayalam Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Gill Sans' (GillSans.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'DIN Alternate' (DIN Alternate Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Manichaean' (NotoSansManichaean-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Kohinoor Telugu' (KohinoorTelugu.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font '.SF Compact' (SFCompactItalic.ttf) italic normal 1000 normal>) = 11.62
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Hoefler Text' (Hoefler Text Ornaments.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Times New Roman' (Times New Roman.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'InaiMathi' (InaiMathi-MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Old Permic' (NotoSansOldPermic-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Farisi' (Farisi.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Devanagari MT' (DevanagariMT.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.otf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.otf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'Myanmar Sangam MN' (Myanmar Sangam MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,485 DEBUG findfont: score(<Font 'New Peninim MT' (NewPeninimMT.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Lucida Grande' (LucidaGrande.ttc) normal normal 500 normal>) = 2.872272727272727
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Zapf Dingbats' (ZapfDingbats.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Modi' (NotoSansModi-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Cochin' (Cochin.ttc) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Pahawh Hmong' (NotoSansPahawhHmong-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Khmer MN' (Khmer MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Shree Devanagari 714' (Shree714.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Futura' (Futura.ttc) normal normal 500 normal>) = 10.145
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Sukhumvit Set' (SukhumvitSet.ttc) normal normal 250 normal>) = 10.1925
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Menlo' (Menlo.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Al Bayan' (AlBayan.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Kannada MN' (Kannada MN.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Palatino' (Palatino.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,486 DEBUG findfont: score(<Font 'Noto Sans Wancho' (NotoSansWancho-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Noto Sans Marchen' (NotoSansMarchen-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Baskerville' (Baskerville.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.otf) italic normal 700 normal>) = 11.335
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Noto Sans Mahajani' (NotoSansMahajani-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Apple Braille' (Apple Braille Pinpoint 8 Dot.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Noto Sans PhagsPa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Courier New' (Courier New Bold.ttf) normal normal 700 normal>) = 10.335
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Songti SC' (Songti.ttc) normal normal 900 normal>) = 10.525
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Andale Mono' (Andale Mono.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Superclarendon' (SuperClarendon.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: score(<Font 'Mukta Mahee' (MuktaMahee.ttc) normal normal 400 normal>) = 10.05
2022-11-22 11:15:58,487 DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/wdiepeveen/PycharmProjects/Cryo-EM/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2022-11-22 11:16:13,233 DEBUG Corresponding type is already real float64.
2022-11-22 11:16:13,233 DEBUG nufft passed real_type for signal, converting
2022-11-22 11:17:10,111 DEBUG Corresponding type is already real float64.
2022-11-22 11:17:10,112 DEBUG nufft passed real_type for signal, converting
